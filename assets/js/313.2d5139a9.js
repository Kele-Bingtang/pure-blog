(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{635:function(e,r,t){"use strict";t.r(r);var a=t(3),s=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#相关组件"}},[e._v("相关组件")]),r("ul",[r("li",[r("a",{attrs:{href:"#控制面板组件-master"}},[e._v("控制面板组件（Master）")])]),r("li",[r("a",{attrs:{href:"#节点组件"}},[e._v("节点组件")])]),r("li",[r("a",{attrs:{href:"#附加组件"}},[e._v("附加组件")])])])]),r("li",[r("a",{attrs:{href:"#分层架构"}},[e._v("分层架构")]),r("ul",[r("li",[r("a",{attrs:{href:"#生态系统"}},[e._v("生态系统")])]),r("li",[r("a",{attrs:{href:"#接口层"}},[e._v("接口层")])]),r("li",[r("a",{attrs:{href:"#管理层"}},[e._v("管理层")])]),r("li",[r("a",{attrs:{href:"#应用层"}},[e._v("应用层")])]),r("li",[r("a",{attrs:{href:"#核心层"}},[e._v("核心层")])])])])])]),r("p"),e._v(" "),r("h2",{attrs:{id:"相关组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相关组件"}},[e._v("#")]),e._v(" 相关组件")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Spring%20Boot/20230618225551.png",alt:"image-20230618225550047"}})]),e._v(" "),r("h3",{attrs:{id:"控制面板组件-master"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#控制面板组件-master"}},[e._v("#")]),e._v(" 控制面板组件（Master）")]),e._v(" "),r("h4",{attrs:{id:"kube-apiserver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kube-apiserver"}},[e._v("#")]),e._v(" kube-apiserver")]),e._v(" "),r("p",[e._v("API 服务器是 Kubernetes "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane",target:"_blank",rel:"noopener noreferrer"}},[e._v("控制平面"),r("OutboundLink")],1),e._v(" 的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。")]),e._v(" "),r("p",[e._v("Kubernetes API 服务器的主要实现是 "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-apiserver"),r("OutboundLink")],1),e._v("。 kube-apiserver 设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。你可以运行 kube-apiserver 的多个实例，并在这些实例之间平衡流量。")]),e._v(" "),r("h4",{attrs:{id:"kube-controller-manager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kube-controller-manager"}},[e._v("#")]),e._v(" kube-controller-manager")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-controller-manager/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kube-controller-manager"),r("OutboundLink")],1),e._v(" 是 "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane",target:"_blank",rel:"noopener noreferrer"}},[e._v("控制平面"),r("OutboundLink")],1),e._v(" 的组件， 负责运行 "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/concepts/architecture/controller/",target:"_blank",rel:"noopener noreferrer"}},[e._v("控制器"),r("OutboundLink")],1),e._v(" 进程。")]),e._v(" "),r("p",[e._v("从逻辑上讲， 每个 "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/concepts/architecture/controller/",target:"_blank",rel:"noopener noreferrer"}},[e._v("控制器"),r("OutboundLink")],1),e._v(" 都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。")]),e._v(" "),r("p",[e._v("这些控制器包括：")]),e._v(" "),r("ul",[r("li",[e._v("节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应")]),e._v(" "),r("li",[e._v("任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成")]),e._v(" "),r("li",[e._v("端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）")]),e._v(" "),r("li",[e._v("服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）")])]),e._v(" "),r("h4",{attrs:{id:"cloud-controller-manager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cloud-controller-manager"}},[e._v("#")]),e._v(" cloud-controller-manager")]),e._v(" "),r("p",[e._v("嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。")]),e._v(" "),r("p",[e._v("cloud-controller-manager 仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。")]),e._v(" "),r("p",[e._v("与 kube-controller-manager 类似，cloud-controller-manager 将若干逻辑上独立的控制回路组合到同一个可执行文件中， 供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。")]),e._v(" "),r("h4",{attrs:{id:"kube-scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kube-scheduler"}},[e._v("#")]),e._v(" kube-scheduler")]),e._v(" "),r("p",[e._v("scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上。")]),e._v(" "),r("h4",{attrs:{id:"etcd"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#etcd"}},[e._v("#")]),e._v(" etcd")]),e._v(" "),r("p",[e._v("一致且高度可用的键值存储，用作 Kubernetes 的所有集群数据的后台数据库。")]),e._v(" "),r("p",[e._v("如果你的 Kubernetes 集群使用 etcd 作为其后台数据库， 请确保你针对这些数据有一份 "),r("a",{attrs:{href:"https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster",target:"_blank",rel:"noopener noreferrer"}},[e._v("备份"),r("OutboundLink")],1),e._v(" 计划。")]),e._v(" "),r("p",[e._v("你可以在官方 "),r("a",{attrs:{href:"https://etcd.io/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),r("OutboundLink")],1),e._v(" 中找到有关 etcd 的深入知识。")]),e._v(" "),r("p",[e._v("早期数据存放在内存，现在已经是持久化存储的了。")]),e._v(" "),r("h3",{attrs:{id:"节点组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#节点组件"}},[e._v("#")]),e._v(" 节点组件")]),e._v(" "),r("h4",{attrs:{id:"kubelet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kubelet"}},[e._v("#")]),e._v(" kubelet")]),e._v(" "),r("p",[e._v("kubelet 负责维护容器的生命周期，同时也负责 Volume（CVI）和网络（CNI）的管理。")]),e._v(" "),r("h4",{attrs:{id:"kube-proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kube-proxy"}},[e._v("#")]),e._v(" kube-proxy")]),e._v(" "),r("p",[e._v("kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡。")]),e._v(" "),r("h4",{attrs:{id:"container-runtime"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#container-runtime"}},[e._v("#")]),e._v(" container runtime")]),e._v(" "),r("p",[e._v("Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）。")]),e._v(" "),r("p",[e._v("Kubernetes 支持许多容器运行环境，例如 "),r("a",{attrs:{href:"https://containerd.io/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("containerd"),r("OutboundLink")],1),e._v("、 "),r("a",{attrs:{href:"https://cri-o.io/#what-is-cri-o",target:"_blank",rel:"noopener noreferrer"}},[e._v("CRI-O"),r("OutboundLink")],1),e._v(" 以及 "),r("a",{attrs:{href:"https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes CRI (容器运行环境接口)"),r("OutboundLink")],1),e._v(" 的其他任何实现。")]),e._v(" "),r("h3",{attrs:{id:"附加组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#附加组件"}},[e._v("#")]),e._v(" 附加组件")]),e._v(" "),r("h4",{attrs:{id:"kube-dns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kube-dns"}},[e._v("#")]),e._v(" kube-dns")]),e._v(" "),r("p",[e._v("kube-dns 负责为整个集群提供 DNS 服务。")]),e._v(" "),r("h4",{attrs:{id:"ingress-controller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ingress-controller"}},[e._v("#")]),e._v(" Ingress Controller")]),e._v(" "),r("p",[e._v("Ingress Controller 为服务提供外网入口。")]),e._v(" "),r("h4",{attrs:{id:"prometheus"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prometheus"}},[e._v("#")]),e._v(" Prometheus")]),e._v(" "),r("p",[e._v("Prometheus 提供资源监控。")]),e._v(" "),r("h4",{attrs:{id:"dashboard"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dashboard"}},[e._v("#")]),e._v(" Dashboard")]),e._v(" "),r("p",[e._v("Dashboard 提供 GUI。")]),e._v(" "),r("h4",{attrs:{id:"federation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#federation"}},[e._v("#")]),e._v(" Federation")]),e._v(" "),r("p",[e._v("Federation 提供跨可用区的集群。")]),e._v(" "),r("h4",{attrs:{id:"fluentd-elasticsearch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fluentd-elasticsearch"}},[e._v("#")]),e._v(" Fluentd-elasticsearch")]),e._v(" "),r("p",[e._v("Fluentd-elasticsearch 提供集群日志采集、存储与查询。")]),e._v(" "),r("h2",{attrs:{id:"分层架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分层架构"}},[e._v("#")]),e._v(" 分层架构")]),e._v(" "),r("h3",{attrs:{id:"生态系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生态系统"}},[e._v("#")]),e._v(" 生态系统")]),e._v(" "),r("p",[e._v("在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴：")]),e._v(" "),r("ul",[r("li",[e._v("Kubernetes 外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS 应用、ChatOps 等")]),e._v(" "),r("li",[e._v("Kubernetes 内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等")])]),e._v(" "),r("h3",{attrs:{id:"接口层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口层"}},[e._v("#")]),e._v(" 接口层")]),e._v(" "),r("p",[e._v("kubectl 命令行工具、客户端 SDK 以及集群联邦。")]),e._v(" "),r("h3",{attrs:{id:"管理层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#管理层"}},[e._v("#")]),e._v(" 管理层")]),e._v(" "),r("p",[e._v("系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态 Provision 等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy 等）。")]),e._v(" "),r("h3",{attrs:{id:"应用层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[e._v("#")]),e._v(" 应用层")]),e._v(" "),r("p",[e._v("部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS 解析等）。")]),e._v(" "),r("h3",{attrs:{id:"核心层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#核心层"}},[e._v("#")]),e._v(" 核心层")]),e._v(" "),r("p",[e._v("Kubernetes 最核心的功能，对外提供 API 构建高层的应用，对内提供插件式应用执行环境。")])])}),[],!1,null,null,null);r.default=s.exports}}]);