(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{554:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#测试"}},[t._v("测试")])]),s("li",[s("a",{attrs:{href:"#使用-stepverifier-来测试"}},[t._v("使用 StepVerifier 来测试")])]),s("li",[s("a",{attrs:{href:"#操控时间"}},[t._v("操控时间")])]),s("li",[s("a",{attrs:{href:"#使用-stepverifier-进行后校验"}},[t._v("使用 StepVerifier 进行后校验")])]),s("li",[s("a",{attrs:{href:"#测试-context"}},[t._v("测试 Context")])]),s("li",[s("a",{attrs:{href:"#用-testpublisher-手动发出元素"}},[t._v("用 TestPublisher 手动发出元素")])]),s("li",[s("a",{attrs:{href:"#用-publisherprobe-检查执行路径"}},[t._v("用 PublisherProbe 检查执行路径")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("无论你是编写了一个简单的 Reactor 操作链，还是开发了自定义的操作符，对它进行 自动化的测试总是一个好主意。")]),t._v(" "),s("p",[t._v("Reactor 内置一些专门用于测试的元素，放在一个专门的 artifact 里： "),s("code",[t._v("reactor-test")]),t._v("。 你可以在 "),s("a",{attrs:{href:"https://github.com/reactor/reactor-core/tree/master/reactor-test/src",target:"_blank",rel:"noopener noreferrer"}},[t._v("on Github"),s("OutboundLink")],1),t._v(" 的 "),s("em",[t._v("reactor-core")]),t._v(" 库里找到这个项目。")]),t._v(" "),s("p",[t._v("如果要用它来进行测试，添加 scope 为 test 的依赖。")]),t._v(" "),s("p",[t._v("reactor-test 用 Maven 配置 "),s("code",[t._v("<dependencies>")])]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("io.projectreactor"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("reactor-test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    // 1\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ol",[s("li",[t._v("如果你使用了 "),s("RouterLink",{attrs:{to:"/reactor/quick-start/#获取-reactor"}},[t._v("BOM")]),t._v("，你不需要指定 "),s("code",[t._v("<version>")]),t._v("。")],1)]),t._v(" "),s("p",[t._v("reactor-test 用 Gradle 配置 "),s("code",[t._v("dependencies")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dependencies {\n   testCompile 'io.projectreactor:reactor-test'\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("code",[t._v("reactor-test")]),t._v(" 的两个主要用途：")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("StepVerifier")]),t._v(" 一步一步地测试一个给定场景的序列")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("TestPublisher")]),t._v(" 生成数据来测试下游的操作符（包括你自己的operator）")])]),t._v(" "),s("h2",{attrs:{id:"使用-stepverifier-来测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-stepverifier-来测试"}},[t._v("#")]),t._v(" 使用 "),s("code",[t._v("StepVerifier")]),t._v(" 来测试")]),t._v(" "),s("p",[t._v("最常见的测试 Reactor 序列的场景就是定义一个 "),s("code",[t._v("Flux")]),t._v(" 或 "),s("code",[t._v("Mono")]),t._v("，然后在订阅它的时候测试它的行为。")]),t._v(" "),s("p",[t._v("当你的测试关注于每一次的事件的时候，就非常容易转化为使用 "),s("code",[t._v("StepVerifier")]),t._v(" 的测试场景： 下一个期望的事件是什么？你是否期望使用 "),s("code",[t._v("Flux")]),t._v(" 来发出一个特别的值？或者接下来 300ms 什么都不做？所有这些都可以使用 "),s("code",[t._v("StepVerifier")]),t._v(" API 来表示。")]),t._v(" "),s("p",[t._v("例如，你可能会使用如下的工具方法来包装一个 "),s("code",[t._v("Flux")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendBoomError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concatWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boom"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("要测试它的话，你需要校验如下内容：")]),t._v(" "),s("blockquote",[s("p",[t._v("我希望这个 "),s("code",[t._v("Flux")]),t._v(" 先发出 "),s("code",[t._v("foo")]),t._v("，然后发出 "),s("code",[t._v("bar")]),t._v("，然后 "),s("strong",[t._v("生成一个内容为 "),s("code",[t._v("boom")]),t._v(" 的错误")]),t._v("。 最后订阅并校验它们。")])]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("StepVerifier")]),t._v(" API 来表示以上的验证过程：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAppendBoomError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendBoomError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectErrorMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boom"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("ol",[s("li",[t._v("由于被测试方法需要一个 "),s("code",[t._v("Flux")]),t._v("，定义一个简单的 "),s("code",[t._v("Flux")]),t._v(" 用于测试")]),t._v(" "),s("li",[t._v("创建一个 "),s("code",[t._v("StepVerifier")]),t._v(" 构造器来包装和校验一个 "),s("code",[t._v("Flux")])]),t._v(" "),s("li",[t._v("传进来需要测试的 "),s("code",[t._v("Flux")]),t._v("（即待测方法的返回结果）")]),t._v(" "),s("li",[t._v("第一个我们期望的信号是 "),s("code",[t._v("onNext")]),t._v("，它的值为 "),s("code",[t._v("foo")])]),t._v(" "),s("li",[t._v("最后我们期望的是一个终止信号 "),s("code",[t._v("onError")]),t._v("，异常内容应该为 "),s("code",[t._v("boom")])]),t._v(" "),s("li",[t._v("不要忘了使用 "),s("code",[t._v("verify()")]),t._v(" 触发测试")])]),t._v(" "),s("p",[t._v("API 是一个构造器，通过传入一个要测试的序列来创建一个 "),s("code",[t._v("StepVerifier")]),t._v("。从而你可以：")]),t._v(" "),s("ul",[s("li",[t._v("表示你 "),s("em",[t._v("期望")]),t._v(" 发生的下一个信号。如果收到其他信号（或者信号与期望不匹配），整个测试就会 失败（"),s("code",[t._v("AssertionError")]),t._v("）。例如你可能会用到 "),s("code",[t._v("expectNext(T...)")]),t._v(" 或 "),s("code",[t._v("expectNextCount(long)")])]),t._v(" "),s("li",[s("em",[t._v("消费")]),t._v(" 下一个信号。当你想要跳过部分序列或者当你想对信号内容进行自定义的 "),s("code",[t._v("assertion")]),t._v(" 的时候会用到它（比如要校验是否有一个 "),s("code",[t._v("onNext")]),t._v(" 信号，并校验对应发出的元素是否是一个 size 为 5 的 List）。你可能会用到 "),s("code",[t._v("consumeNextWith(Consumer<T>)")])]),t._v(" "),s("li",[s("em",[t._v("更多样的操作")]),t._v(" 比如暂停或运行一段代码。比如，你想对测试状态或内容进行调整或处理， 你可能会用到 "),s("code",[t._v("thenAwait(Duration)")]),t._v(" 和 "),s("code",[t._v("then(Runnable)")])])]),t._v(" "),s("p",[t._v("对于终止事件，相应的期望方法（"),s("code",[t._v("expectComplete()")]),t._v("、"),s("code",[t._v("expectError()")]),t._v("，及其所有的变体方法） 使用之后就不能再继续增加别的期望方法了。最后你只能对 "),s("code",[t._v("StepVerifier")]),t._v(" 进行一些额外的配置并 "),s("strong",[t._v("触发校验")]),t._v("（通常调用 "),s("code",[t._v("verify()")]),t._v(" 及其变体方法）。")]),t._v(" "),s("p",[t._v("从 StepVerifier 内部来看，它订阅了待测试的 "),s("code",[t._v("Flux")]),t._v(" 或 "),s("code",[t._v("Mono")]),t._v("，然后将序列中的每个信号与测试 场景的期望进行比对。如果匹配的话，测试成功。如果有不匹配的情况，则抛出 "),s("code",[t._v("AssertionError")]),t._v(" 异常。")]),t._v(" "),s("blockquote",[s("p",[t._v("请记住是 "),s("code",[t._v("verify()")]),t._v(" 触发了校验过程。这个 API 还有一些结合了 "),s("code",[t._v("verify()")]),t._v(" 与期望的终止信号 的方法："),s("code",[t._v("verifyComplete()")]),t._v("、"),s("code",[t._v("verifyError()")]),t._v("、"),s("code",[t._v("verifyErrorMessage(String)")]),t._v(" 等。")])]),t._v(" "),s("p",[t._v("注意，如果有一个传入 lambda 的期望方法抛出了 "),s("code",[t._v("AssertionError")]),t._v("，会被报告为测试失败。 这可用于自定义 assertion。")]),t._v(" "),s("blockquote",[s("p",[t._v("默认情况下，"),s("code",[t._v("verify()")]),t._v(" 方法（及同源的 "),s("code",[t._v("verifyThenAssertThat")]),t._v("、"),s("code",[t._v("verifyComplete()")]),t._v("等） 没有超时的概念。它可能会永远阻塞住。你可以使用 "),s("code",[t._v("StepVerifier.setDefaultTimeout(Duration)")]),t._v(" 来设置一个全局的超时时间，或使用 "),s("code",[t._v("verify(Duration)")]),t._v(" 指定。")])]),t._v(" "),s("h2",{attrs:{id:"操控时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操控时间"}},[t._v("#")]),t._v(" 操控时间")]),t._v(" "),s("p",[s("code",[t._v("StepVerifier")]),t._v(" 可以用来测试基于时间的操作符，从而避免测试的长时间运行。可以使用构造器 "),s("code",[t._v("StepVerifier.withVirtualTime")]),t._v(" 达到这一点。")]),t._v(" "),s("p",[t._v("示例如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withVirtualTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofDays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//... 继续追加期望方法")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("虚拟时间（virtual time）")]),t._v(" 的功能会在 Reactor 的调度器（"),s("code",[t._v("Scheduler")]),t._v("）工厂方法中插入一个自定义的 调度器。这些基于时间的操作符通常默认使用 "),s("code",[t._v("Schedulers.parallel()")]),t._v(" 调度器。（虚拟时间的） 技巧在于使用一个 "),s("code",[t._v("VirtualTimeScheduler")]),t._v(" 来代替默认调度器。然而一个重要的前提就是，只有在初始化 虚拟时间调度器之后的操作符才会起作用。")]),t._v(" "),s("p",[t._v("为了提高 "),s("code",[t._v("StepVerifier")]),t._v(" 正常起作用的概率，它一般不接收一个简单的 "),s("code",[t._v("Flux")]),t._v(" 作为输入，而是接收 一个 "),s("code",[t._v("Supplier")]),t._v("，从而可以在配置好订阅者 "),s("strong",[t._v("之后")]),t._v(" 「懒创建」待测试的 flux。")]),t._v(" "),s("blockquote",[s("p",[t._v("要注意的是，"),s("code",[t._v("Supplier<Publisher<T>>")]),t._v(" 可用于「懒创建」，否则不能保证虚拟时间 能完全起作用。尤其要避免提前实例化 "),s("code",[t._v("Flux")]),t._v("，要在 "),s("code",[t._v("Supplier")]),t._v(" 中用 lambda 创建并返回 "),s("code",[t._v("Flux")]),t._v(" 变量。")])]),t._v(" "),s("p",[t._v("有两种处理时间的期望方法，无论是否配置虚拟时间都是可用的：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("thenAwait(Duration)")]),t._v(" 暂停校验步骤（允许信号延迟发出）")]),t._v(" "),s("li",[s("code",[t._v("expectNoEvent(Duration)")]),t._v(" 同样让序列持续一定的时间，期间如果有 "),s("strong",[t._v("任何")]),t._v(" 信号发出则测试失败")])]),t._v(" "),s("p",[t._v("两个方法都会基于给定的持续时间暂停线程的执行，如果是在虚拟时间模式下就相应地使用虚拟时间。")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("expectNoEvent")]),t._v(" 将订阅（"),s("code",[t._v("subscription")]),t._v("）也认作一个事件。假设你用它作为第一步，如果检测 到有订阅信号，也会失败。这时候可以使用 "),s("code",[t._v("expectSubscription().expectNoEvent(duration)")]),t._v(" 来代替。")])]),t._v(" "),s("p",[t._v("为了快速校验前边提到的 "),s("code",[t._v("Mono.delay")]),t._v("，我们可以这样完成代码：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withVirtualTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofDays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectSubscription")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNoEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Duration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofDays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ol",[s("li",[t._v("期待一天内没有信号发生")]),t._v(" "),s("li",[t._v("然后期待一个 next 信号为 "),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("然后期待完成（同时触发校验）")])]),t._v(" "),s("p",[t._v("我们也可以使用 "),s("code",[t._v("thenAwait(Duration.ofDays(1))")]),t._v("，但是 "),s("code",[t._v("expectNoEvent")]),t._v(" 的好处是 能够验证在此之前不会发生什么。")]),t._v(" "),s("p",[t._v("注意 "),s("code",[t._v("verify()")]),t._v(" 返回一个 "),s("code",[t._v("Duration")]),t._v("，这是整个测试的 "),s("strong",[t._v("真实时间")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("虚拟时间并非银弹。请记住 "),s("em",[t._v("所有的")]),t._v(" 调度器都会被替换为 "),s("code",[t._v("VirtualTimeScheduler")]),t._v("。 有些时候你可以锁定校验过程，因为虚拟时钟在遇到第一个期望校验之前并不会开始，所以对于 「无数据「的期望校验也必须能够运行在虚拟时间模式下。在无限序列中，虚拟时间模式的发挥 空间也很有限，因为它可能导致线程（序列的发出和校验的运行都在这个线程上）卡住。")])]),t._v(" "),s("h2",{attrs:{id:"使用-stepverifier-进行后校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-stepverifier-进行后校验"}},[t._v("#")]),t._v(" 使用 "),s("code",[t._v("StepVerifier")]),t._v(" 进行后校验")]),t._v(" "),s("p",[t._v("当配置完你测试场景的最后的期望方法后，你可以使用 "),s("code",[t._v("verifyThenAssertThat()")]),t._v(" 来代替 "),s("code",[t._v("verify()")]),t._v(" 触发执行后的校验。")]),t._v(" "),s("p",[s("code",[t._v("verifyThenAssertThat()")]),t._v(" 返回一个 "),s("code",[t._v("StepVerifier.Assertions")]),t._v(" 对象，你可以用它来校验 整个测试场景成功刚结束后的一些状态（"),s("strong",[t._v("它也会调用 "),s("code",[t._v("verify()")])]),t._v("）。典型应用就是校验有多少 元素被操作符丢弃（参考 "),s("RouterLink",{attrs:{to:"/reactor/advanced-features-and-concepts/#使用全局的-hooks"}},[t._v("使用全局的 Hooks")]),t._v("）。")],1),t._v(" "),s("h2",{attrs:{id:"测试-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-context"}},[t._v("#")]),t._v(" 测试 "),s("code",[t._v("Context")])]),t._v(" "),s("p",[t._v("更多关于 "),s("code",[t._v("Context")]),t._v(" 的内容请参考 "),s("RouterLink",{attrs:{to:"/reactor/advanced-features-and-concepts/#增加一个-context-到响应式序列"}},[t._v("增加一个 Context 到响应式序列")]),t._v("。")],1),t._v(" "),s("p",[s("code",[t._v("StepVerifier")]),t._v(" 有一些期望方法可以用来测试 "),s("code",[t._v("Context")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("expectAccessibleContext")]),t._v(": 返回一个 "),s("code",[t._v("ContextExpectations")]),t._v(" 对象，你可以用它来在 "),s("code",[t._v("Context")]),t._v(" 上配置期望校验。一定记住要调用 "),s("code",[t._v("then()")]),t._v(" 来返回到对序列的期望校验上来")]),t._v(" "),s("li",[s("code",[t._v("expectNoAccessibleContext")]),t._v(": 是对「没有"),s("code",[t._v("Context")]),t._v("」的校验。通常用于 被测试的 "),s("code",[t._v("Publisher")]),t._v(" 并不是一个响应式的，或没有任何操作符能够传递 "),s("code",[t._v("Context")]),t._v(" （比如一个 "),s("code",[t._v("generate")]),t._v(" 的 "),s("code",[t._v("Publisher")]),t._v("）")])]),t._v(" "),s("p",[t._v("此外，还可以用 "),s("code",[t._v("StepVerifierOptions")]),t._v(" 方法传入一个测试用的初始 "),s("code",[t._v("Context")]),t._v(" 给 "),s("code",[t._v("StepVerifier")]),t._v("， 从而可以创建一个校验（verifier）。")]),t._v(" "),s("p",[t._v("这些特性通过下边的代码演示：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifierOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withInitialContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Context")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectAccessibleContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ol",[s("li",[t._v("使用 "),s("code",[t._v("StepVerifierOptions")]),t._v(" 创建 "),s("code",[t._v("StepVerifier")]),t._v(" 并传入初始 "),s("code",[t._v("Context")])]),t._v(" "),s("li",[t._v("开始对 "),s("code",[t._v("Context")]),t._v(" 进行校验，这里只是确保 "),s("code",[t._v("Context")]),t._v(" 正常传播了")]),t._v(" "),s("li",[t._v("对 "),s("code",[t._v("Context")]),t._v(' 进行校验的例子：比如验证是否包含一个 "foo" - "bar" 键值对')]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("then()")]),t._v(" 切换回对序列的校验")]),t._v(" "),s("li",[t._v("不要忘了用 "),s("code",[t._v("verify()")]),t._v(" 触发整个校验过程")])]),t._v(" "),s("h2",{attrs:{id:"用-testpublisher-手动发出元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-testpublisher-手动发出元素"}},[t._v("#")]),t._v(" 用 "),s("code",[t._v("TestPublisher")]),t._v(" 手动发出元素")]),t._v(" "),s("p",[t._v("对于更多高级的测试，如果能够完全掌控源发出的数据就会方便很多，因为这样就可以在测试的 时候更加有的放矢地发出想测的数据。")]),t._v(" "),s("p",[t._v("另一种情况就是你实现了自己的操作符，然后想校验它的行为——尤其是在源不稳定的时候——是否符合响应式流规范。")]),t._v(" "),s("p",[s("code",[t._v("reactor-test")]),t._v(" 提供了 "),s("code",[t._v("TestPublisher")]),t._v(" 类来应对这两种需求。这个类本质上是一个 "),s("code",[t._v("Publisher<T>")]),t._v("， 你可以通过可编程的方式来用它发出各种信号：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("next(T)")]),t._v(" 以及 "),s("code",[t._v("next(T, T...)")]),t._v(" 发出 1-n 个 "),s("code",[t._v("onNext")]),t._v(" 信号")]),t._v(" "),s("li",[s("code",[t._v("emit(T...)")]),t._v(" 起同样作用，并且会执行 "),s("code",[t._v("complete()")])]),t._v(" "),s("li",[s("code",[t._v("complete()")]),t._v(" 会发出终止信号 "),s("code",[t._v("onComplete")])]),t._v(" "),s("li",[s("code",[t._v("error(Throwable)")]),t._v(" 会发出终止信号 "),s("code",[t._v("onError")])])]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("create")]),t._v(" 工厂方法就可以得到一个正常的 "),s("code",[t._v("TestPublisher")]),t._v("。而使用 "),s("code",[t._v("createNonCompliant")]),t._v(" 工厂方法可以创建一个「不正常」的 "),s("code",[t._v("TestPublisher")]),t._v("。后者需要传入由 "),s("code",[t._v("TestPublisher.Violation")]),t._v(" 枚举指定的一组选项，这些选项可用于告诉 publisher 忽略哪些问题。枚举值有：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("REQUEST_OVERFLOW")]),t._v(": 允许 "),s("code",[t._v("next")]),t._v(" 在请求不足的时候也可以调用，而不会触发 "),s("code",[t._v("IllegalStateException")])]),t._v(" "),s("li",[s("code",[t._v("ALLOW_NULL")]),t._v(": 允许 "),s("code",[t._v("next")]),t._v(" 能够发出一个 "),s("code",[t._v("null")]),t._v(" 值而不会触发 "),s("code",[t._v("NullPointerException")])]),t._v(" "),s("li",[s("code",[t._v("CLEANUP_ON_TERMINATE")]),t._v(": 可以重复多次发出终止信号，包括 "),s("code",[t._v("complete()")]),t._v("、"),s("code",[t._v("error()")]),t._v(" 和 "),s("code",[t._v("emit()")])])]),t._v(" "),s("p",[t._v("最后，"),s("code",[t._v("TestPublisher")]),t._v(" 还可以用不同的 "),s("code",[t._v("assert*")]),t._v(" 来跟踪其内部的订阅状态。")]),t._v(" "),s("p",[t._v("使用转换方法 "),s("code",[t._v("flux()")]),t._v(" 和 "),s("code",[t._v("mono()")]),t._v(" 可以将其作为 "),s("code",[t._v("Flux")]),t._v(" 和 "),s("code",[t._v("Mono")]),t._v(" 来使用。")]),t._v(" "),s("h2",{attrs:{id:"用-publisherprobe-检查执行路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-publisherprobe-检查执行路径"}},[t._v("#")]),t._v(" 用 "),s("code",[t._v("PublisherProbe")]),t._v(" 检查执行路径")]),t._v(" "),s("p",[t._v("当构建复杂的操作链时，可能会有多个子序列，从而导致多个执行路径。")]),t._v(" "),s("p",[t._v("多数时候，这些子序列会生成一个足够明确的 "),s("code",[t._v("onNext")]),t._v(" 信号，你可以通过检查最终结果 来判断它是否执行。")]),t._v(" "),s("p",[t._v("考虑下边这个方法，它构建了一条操作链，并使用 "),s("code",[t._v("switchIfEmpty")]),t._v(" 方法在源为空的情况下， 替换成另一个源。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrFallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fallback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" source\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatMapMany")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Flux")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\s+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("switchIfEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fallback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("很容易就可以测试出 switchIfEmpty 的哪一个逻辑分支被使用了，如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testSplitPathIsUsed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrFallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"just a  phrase with    tabs!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EMPTY_PHRASE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"just"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"phrase"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"with"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tabs!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testEmptyPathIsUsed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrFallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EMPTY_PHRASE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("expectNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EMPTY_PHRASE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("但是如果例子中的方法返回的是一个 "),s("code",[t._v("Mono<Void>")]),t._v(" 呢？它等待源发送结束，执行一个额外的任务， 然后就结束了。如果源是空的，则执行另一个备用的类似于 Runnable 的任务，如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" DONE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrFallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commandSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" doWhenEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" commandSource\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("switchIfEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doWhenEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("ol",[s("li",[s("code",[t._v("then()")]),t._v(" 方法会忽略 command，它只关心是否结束")]),t._v(" "),s("li",[t._v("两个都是空序列，这个时候如何区分（哪边执行了）呢？")])]),t._v(" "),s("p",[t._v("为了验证执行路径是经过了 "),s("code",[t._v("doWhenEmpty")]),t._v(" 的，你需要编写额外的代码，比如你需要一个这样的 "),s("code",[t._v("Mono<Void>")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("能够捕获到它被订阅的事实")]),t._v(" "),s("li",[t._v("以上事实需要在整个执行结束 "),s("strong",[t._v("之后")]),t._v(" 再进行验证")])]),t._v(" "),s("p",[t._v("在 3.1 版本以前，你需要为每一种状态维护一个 "),s("code",[t._v("AtomicBoolean")]),t._v(" 变量，然后在相应的 "),s("code",[t._v("doOn*")]),t._v(" 回调中观察它的值。这需要添加不少的额外代码。好在，版本 3.1.0 之后可以使用 "),s("code",[t._v("PublisherProbe")]),t._v(" 来做， 如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testCommandEmptyPathIsUsed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PublisherProbe")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" probe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PublisherProbe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StepVerifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processOrFallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" probe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mono")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    probe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertWasSubscribed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n    probe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertWasRequested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n    probe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assertWasNotCancelled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("ol",[s("li",[t._v("创建一个探针（probe），它会转化为一个空序列")]),t._v(" "),s("li",[t._v("在需要使用 "),s("code",[t._v("Mono<Void>")]),t._v(" 的位置调用 "),s("code",[t._v("probe.mono()")]),t._v(" 来替换为探针")]),t._v(" "),s("li",[t._v("序列结束之后，你可以用这个探针来判断序列是如何使用的，你可以检查是它从哪（条路径）被订阅的")]),t._v(" "),s("li",[t._v("对于请求也是一样的")]),t._v(" "),s("li",[t._v("以及是否被取消了")])]),t._v(" "),s("p",[t._v("你也可以在使用 "),s("code",[t._v("Flux<T>")]),t._v(" 的位置通过调用 "),s("code",[t._v(".flux()")]),t._v(" 方法来放置探针。如果你既需要用探针检查执行路径 还需要它能够发出数据，你可以用 "),s("code",[t._v("PublisherProbe.of(Publisher)")]),t._v(" 方法包装一个 "),s("code",[t._v("Publisher<T>")]),t._v(" 来搞定")])])}),[],!1,null,null,null);s.default=e.exports}}]);