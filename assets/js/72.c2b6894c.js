(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{397:function(t,s,a){"use strict";a.r(s);var r=a(3),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#为什么使用集合框架"}},[t._v("为什么使用集合框架？")])]),s("li",[s("a",{attrs:{href:"#集合框架包含的内容"}},[t._v("集合框架包含的内容")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"为什么使用集合框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用集合框架"}},[t._v("#")]),t._v(" 为什么使用集合框架？")]),t._v(" "),s("p",[t._v("假设，一个班级有 30 个人，我们需要存储学员的信息，是不是我们可以用一个一维数组就解决了？")]),t._v(" "),s("p",[t._v("那换一个问题，一个网站每天要存储的新闻信息，我们知道新闻是可以实时发布的，我们并不知道需要多大的空间去存储，我要是去设置一个很大的数组，要是没有存满，或者不够用，都会影响我们，前者浪费的空间，后者影响了业务。")]),t._v(" "),s("p",[t._v("如果并不知道程序运行时会需要多少对象，或者需要更复杂的方式存储对象，那我们就可以使用 Java 的集合框架。")]),t._v(" "),s("h2",{attrs:{id:"集合框架包含的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合框架包含的内容"}},[t._v("#")]),t._v(" 集合框架包含的内容")]),t._v(" "),s("p",[t._v("Java 集合框架提供了一套性能优良，使用方便的接口和类，他们位于 java.util 包中。")]),t._v(" "),s("p",[t._v("接口和具体类")]),t._v(" "),s("div",{staticClass:"language-mermaid line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD\nA "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[List接口]")]),t._v("\nA"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[Collection接口]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" \\C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[set接口]")]),t._v("\n\nB "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v("  C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[ArrayList]")]),t._v("\nB "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v("  /C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[LinkList]")]),t._v("\n\\C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[set]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" D"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[HashSet]")]),t._v("\n\\C"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[set接口]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" /D"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[TreeSet]")]),t._v("\nD"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[HashSet]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[LinkedHashSet]")]),t._v("\n\nE "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" F"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[HashMap]")]),t._v("\nF"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[HashMap]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" I"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[LinkedHashMap]")]),t._v("\nE "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" G"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[TresMap]")]),t._v("\nE"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[Map接口]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("---\x3e")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[Hashtable]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("图片：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java%E9%9B%86%E5%90%88/20211024143713.png",alt:""}})]),t._v(" "),s("p",[t._v("算法")]),t._v(" "),s("p",[t._v("Collections 类提供了对集合进行排序，遍历等多种算法实现。")]),t._v(" "),s("p",[t._v("重中之重：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Collection 接口存储一组不唯一，无序的对象")])]),t._v(" "),s("li",[s("p",[t._v("List 接口存储一组不唯一，有序的对象")])]),t._v(" "),s("li",[s("p",[t._v("Set 接口存储一组唯一，无序的对象")])]),t._v(" "),s("li",[s("p",[t._v("Map 接口存储一组键值对象，提供 key 到 value 的映射")])]),t._v(" "),s("li",[s("p",[t._v("ArrayList 实现了长度可变的数组，在内存中分配连续的空间。遍历元素和随机访问元素的效率比较高")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java%E9%9B%86%E5%90%88/20211024144026.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("LinkedList 采用链表存储方式。插入、删除元素时效率比较高")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java%E9%9B%86%E5%90%88/20211024144045.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("HashSet 采用哈希算法实现的 Set，HashSet 的底层是用 HashMap 实现的，因此查询效率较高，由于采用 hashCode 算法直接确定元素的内存地址，增删效率也挺高的")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);