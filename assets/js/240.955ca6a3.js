(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{562:function(r,i,n){"use strict";n.r(i);var p=n(3),t=Object(p.a)({},(function(){var r=this,i=r._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[i("p"),i("div",{staticClass:"table-of-contents"},[i("ul",[i("li",[i("a",{attrs:{href:"#spring-是什么"}},[r._v("Spring 是什么？")])]),i("li",[i("a",{attrs:{href:"#spring-的狭义和广义"}},[r._v("Spring 的狭义和广义")]),i("ul",[i("li",[i("a",{attrs:{href:"#广义的-spring-spring-技术栈"}},[r._v("广义的 Spring：Spring 技术栈")])]),i("li",[i("a",{attrs:{href:"#狭义的-spring-spring-framework"}},[r._v("狭义的 Spring：Spring Framework")])])])]),i("li",[i("a",{attrs:{href:"#spring-framework-特点"}},[r._v("Spring Framework 特点")])]),i("li",[i("a",{attrs:{href:"#spring-模块组成"}},[r._v("Spring 模块组成")]),i("ul",[i("li",[i("a",{attrs:{href:"#spring-core-核心容器"}},[r._v("Spring Core（核心容器")])])])]),i("li",[i("a",{attrs:{href:"#spring6-特点"}},[r._v("Spring6 特点")]),i("ul",[i("li",[i("a",{attrs:{href:"#版本要求"}},[r._v("版本要求")])])])])])]),i("p"),r._v(" "),i("h2",{attrs:{id:"spring-是什么"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-是什么"}},[r._v("#")]),r._v(" Spring 是什么？")]),r._v(" "),i("p",[r._v("Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由「Spring 之父」Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。")]),r._v(" "),i("p",[r._v("Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java 企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE 代名词，成为了构建 Java EE 应用的事实标准。")]),r._v(" "),i("p",[r._v("自 2004 年 4 月，Spring 1.0 版本正式发布以来，Spring 已经步入到了第 6 个大版本，也就是 Spring 6。本课程采用 Spring 当前最新发布的正式版本 "),i("strong",[r._v("6.0.2")]),r._v("。")]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Spring6/20231027231637.png",alt:"image-20221216223135162"}})]),r._v(" "),i("h2",{attrs:{id:"spring-的狭义和广义"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-的狭义和广义"}},[r._v("#")]),r._v(" Spring 的狭义和广义")]),r._v(" "),i("p",[r._v("在不同的语境中，Spring 所代表的含义是不同的。下面我们就分别从「广义」和「狭义」两个角度，对 Spring 进行介绍。")]),r._v(" "),i("h3",{attrs:{id:"广义的-spring-spring-技术栈"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#广义的-spring-spring-技术栈"}},[r._v("#")]),r._v(" 广义的 Spring：Spring 技术栈")]),r._v(" "),i("p",[r._v("广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。")]),r._v(" "),i("p",[r._v("经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。")]),r._v(" "),i("p",[r._v("这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。")]),r._v(" "),i("h3",{attrs:{id:"狭义的-spring-spring-framework"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#狭义的-spring-spring-framework"}},[r._v("#")]),r._v(" 狭义的 Spring：Spring Framework")]),r._v(" "),i("p",[r._v("狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。")]),r._v(" "),i("p",[r._v("Spring 框架是一个分层的、面向切面的 Java 应用程序的一站式轻量级解决方案，它是 Spring 技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。")]),r._v(" "),i("p",[r._v("Spring 有两个最核心模块： IOC 和 AOP。")]),r._v(" "),i("p",[i("strong",[r._v("IOC")]),r._v("：Inverse of Control 的简写，译为「控制反转」，指把创建对象过程交给 Spring 进行管理。")]),r._v(" "),i("p",[i("strong",[r._v("AOP")]),r._v("：Aspect Oriented Programming 的简写，译为「面向切面编程」。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。")]),r._v(" "),i("h2",{attrs:{id:"spring-framework-特点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-framework-特点"}},[r._v("#")]),r._v(" Spring Framework 特点")]),r._v(" "),i("ul",[i("li",[i("p",[r._v("非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅")])]),r._v(" "),i("li",[i("p",[r._v("控制反转：IOC —— Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入")])]),r._v(" "),i("li",[i("p",[r._v("面向切面编程：AOP —— Aspect Oriented Programming，在不修改源代码的基础上增强代码功能")])]),r._v(" "),i("li",[i("p",[r._v("容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率")])]),r._v(" "),i("li",[i("p",[r._v("组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统")])]),r._v(" "),i("li",[i("p",[r._v("一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现")])])]),r._v(" "),i("h2",{attrs:{id:"spring-模块组成"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-模块组成"}},[r._v("#")]),r._v(" Spring 模块组成")]),r._v(" "),i("p",[r._v("官网地址："),i("code",[r._v("https://Spring.io/")])]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Spring6/20231027231641.png",alt:"image-20221207142746771"}})]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Spring6/20231027231642.png",alt:"image-2097896352"}})]),r._v(" "),i("p",[r._v("上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。")]),r._v(" "),i("h3",{attrs:{id:"spring-core-核心容器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-core-核心容器"}},[r._v("#")]),r._v(" Spring Core（核心容器")]),r._v(" "),i("p",[r._v("Spring core 提供了 IOC，DI，Bean 配置装载创建的核心实现。核心概念：Beans、BeanFactory、BeanDefinitions、ApplicationContext。")]),r._v(" "),i("ul",[i("li",[i("p",[r._v("Spring-core ：IOC 和 DI 的基本实现")])]),r._v(" "),i("li",[i("p",[r._v("Spring-Beans：BeanFactory 和 Bean 的装配管理(BeanFactory)")])]),r._v(" "),i("li",[i("p",[r._v("Spring-context：Spring context 上下文，即 IOC 容器(AppliactionContext)")])]),r._v(" "),i("li",[i("p",[r._v("Spring-expression：Spring 表达式语言")])])]),r._v(" "),i("p",[i("strong",[r._v("②Spring AOP")])]),r._v(" "),i("ul",[i("li",[r._v("Spring-aop：面向切面编程的应用模块，整合 ASM，CGLib，JDK Proxy")]),r._v(" "),i("li",[r._v("Spring-aspects：集成 AspectJ，AOP 应用框架")]),r._v(" "),i("li",[r._v("Spring-instrument：动态 Class Loading 模块")])]),r._v(" "),i("p",[i("strong",[r._v("③Spring Data Access")])]),r._v(" "),i("ul",[i("li",[r._v("Spring-jdbc：Spring 对 JDBC 的封装，用于简化 jdbc 操作")]),r._v(" "),i("li",[r._v("Spring-orm：Java 对象与数据库数据的映射框架")]),r._v(" "),i("li",[r._v("Spring-oxm：对象与 XML 文件的映射框架")]),r._v(" "),i("li",[r._v("Spring-jms： Spring 对Java Message Service(Java 消息服务)的封装，用于服务之间相互通信")]),r._v(" "),i("li",[r._v("Spring-tx：Spring jdbc事务管理")])]),r._v(" "),i("p",[i("strong",[r._v("④Spring Web")])]),r._v(" "),i("ul",[i("li",[r._v("Spring-web：最基础的 Web 支持，建立于 Spring-context 之上，通过 servlet 或 listener 来初始化 IOC 容器")]),r._v(" "),i("li",[r._v("Spring-webmvc：实现 web mvc")]),r._v(" "),i("li",[r._v("Spring-websocket：与前端的全双工通信协议")]),r._v(" "),i("li",[r._v("Spring-webflux：Spring 5.0 提供的，用于取代传统 Java servlet，非阻塞式 Reactive Web 框架，异步，非阻塞，事件驱动的服务")])]),r._v(" "),i("p",[i("strong",[r._v("⑤Spring Message")])]),r._v(" "),i("ul",[i("li",[r._v("Spring-messaging：Spring 4.0 提供的，为 Spring 集成一些基础的报文传送服务")])]),r._v(" "),i("p",[i("strong",[r._v("⑥Spring test")])]),r._v(" "),i("ul",[i("li",[r._v("Spring-test：集成测试支持，主要是对 junit 的封装")])]),r._v(" "),i("h2",{attrs:{id:"spring6-特点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring6-特点"}},[r._v("#")]),r._v(" Spring6 特点")]),r._v(" "),i("h3",{attrs:{id:"版本要求"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本要求"}},[r._v("#")]),r._v(" 版本要求")]),r._v(" "),i("p",[i("strong",[r._v("Spring6 要求 JDK 最低版本是 JDK17")])]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Spring6/20231027231645.png",alt:"image-20221201103138194"}})])])}),[],!1,null,null,null);i.default=t.exports}}]);