(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{444:function(a,t,s){"use strict";s.r(t);var e=s(3),v=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#gc分类与性能指标"}},[a._v("GC分类与性能指标")]),t("ul",[t("li",[t("a",{attrs:{href:"#垃圾收集器分类"}},[a._v("垃圾收集器分类")])]),t("li",[t("a",{attrs:{href:"#评估gc的性能指标"}},[a._v("评估GC的性能指标")])]),t("li",[t("a",{attrs:{href:"#性能指标之吞吐量"}},[a._v("性能指标之吞吐量")])]),t("li",[t("a",{attrs:{href:"#性能指标之暂停时间"}},[a._v("性能指标之暂停时间")])]),t("li",[t("a",{attrs:{href:"#吞吐量vs暂停时间"}},[a._v("吞吐量vs暂停时间")])])])]),t("li",[t("a",{attrs:{href:"#不同的垃圾回收器概述"}},[a._v("不同的垃圾回收器概述")]),t("ul",[t("li",[t("a",{attrs:{href:"#垃圾回收器发展史"}},[a._v("垃圾回收器发展史")])]),t("li",[t("a",{attrs:{href:"#_7种经典的垃圾收集器"}},[a._v("7种经典的垃圾收集器")])]),t("li",[t("a",{attrs:{href:"#_7款经典收集器与垃圾分代之间的关系"}},[a._v("7款经典收集器与垃圾分代之间的关系")])]),t("li",[t("a",{attrs:{href:"#垃圾收集器的组合关系"}},[a._v("垃圾收集器的组合关系")])]),t("li",[t("a",{attrs:{href:"#如何查看默认垃圾收集器"}},[a._v("如何查看默认垃圾收集器")])])])]),t("li",[t("a",{attrs:{href:"#serial回收器-串行回收"}},[a._v("Serial回收器 - 串行回收")]),t("ul",[t("li",[t("a",{attrs:{href:"#总结"}},[a._v("总结")])])])]),t("li",[t("a",{attrs:{href:"#parnew回收器-并行回收"}},[a._v("ParNew回收器 - 并行回收")])]),t("li",[t("a",{attrs:{href:"#parallel回收器-吞吐量优先"}},[a._v("Parallel回收器 - 吞吐量优先")]),t("ul",[t("li",[t("a",{attrs:{href:"#参数配置"}},[a._v("参数配置")])])])]),t("li",[t("a",{attrs:{href:"#cms回收器-低延迟"}},[a._v("CMS回收器 - 低延迟")]),t("ul",[t("li",[t("a",{attrs:{href:"#cms为什么不使用标记整理算法"}},[a._v("CMS为什么不使用标记整理算法？")])]),t("li",[t("a",{attrs:{href:"#优点"}},[a._v("优点")])]),t("li",[t("a",{attrs:{href:"#缺点"}},[a._v("缺点")])]),t("li",[t("a",{attrs:{href:"#设置的参数"}},[a._v("设置的参数")])]),t("li",[t("a",{attrs:{href:"#小结"}},[a._v("小结")])]),t("li",[t("a",{attrs:{href:"#jdk后续版本中cms的变化"}},[a._v("JDK后续版本中CMS的变化")])])])]),t("li",[t("a",{attrs:{href:"#g1回收器-区域化分代式"}},[a._v("G1回收器 - 区域化分代式")]),t("ul",[t("li",[t("a",{attrs:{href:"#g1垃圾收集器的优点"}},[a._v("G1垃圾收集器的优点")])]),t("li",[t("a",{attrs:{href:"#g1垃圾收集器的缺点"}},[a._v("G1垃圾收集器的缺点")])]),t("li",[t("a",{attrs:{href:"#g1参数设置"}},[a._v("G1参数设置")])]),t("li",[t("a",{attrs:{href:"#g1收集器的常见操作步骤"}},[a._v("G1收集器的常见操作步骤")])]),t("li",[t("a",{attrs:{href:"#g1收集器的适用场景"}},[a._v("G1收集器的适用场景")])]),t("li",[t("a",{attrs:{href:"#分区region-化整为零"}},[a._v("分区Region - 化整为零")])]),t("li",[t("a",{attrs:{href:"#g1垃圾回收器的回收过程"}},[a._v("G1垃圾回收器的回收过程")])]),t("li",[t("a",{attrs:{href:"#remembered-set-记忆集"}},[a._v("Remembered Set（记忆集）")])]),t("li",[t("a",{attrs:{href:"#g1回收过程-年轻代gc"}},[a._v("G1回收过程 - 年轻代GC")])]),t("li",[t("a",{attrs:{href:"#g1回收过程-老年代gc"}},[a._v("G1回收过程 - 老年代GC")])]),t("li",[t("a",{attrs:{href:"#g1回收过程-混合回收"}},[a._v("G1回收过程 - 混合回收")])]),t("li",[t("a",{attrs:{href:"#g1回收可选的过程-full-gc"}},[a._v("G1回收可选的过程 - Full GC")])]),t("li",[t("a",{attrs:{href:"#g1回收的优化建议"}},[a._v("G1回收的优化建议")])])])]),t("li",[t("a",{attrs:{href:"#垃圾回收器总结"}},[a._v("垃圾回收器总结")]),t("ul",[t("li",[t("a",{attrs:{href:"#怎么选择垃圾回收器"}},[a._v("怎么选择垃圾回收器")])]),t("li",[t("a",{attrs:{href:"#面试"}},[a._v("面试")])])])]),t("li",[t("a",{attrs:{href:"#gc日志分析"}},[a._v("GC日志分析")]),t("ul",[t("li",[t("a",{attrs:{href:"#verbose-gc"}},[a._v("verbose:gc")])]),t("li",[t("a",{attrs:{href:"#printgcdetails"}},[a._v("PrintGCDetails")])]),t("li",[t("a",{attrs:{href:"#补充"}},[a._v("补充")])]),t("li",[t("a",{attrs:{href:"#young-gc图片"}},[a._v("Young GC图片")])]),t("li",[t("a",{attrs:{href:"#full-gc图片"}},[a._v("Full GC图片")])]),t("li",[t("a",{attrs:{href:"#gc回收举例"}},[a._v("GC回收举例")])]),t("li",[t("a",{attrs:{href:"#常用日志分析工具"}},[a._v("常用日志分析工具")])])])]),t("li",[t("a",{attrs:{href:"#垃圾回收器的新发展"}},[a._v("垃圾回收器的新发展")]),t("ul",[t("li",[t("a",{attrs:{href:"#shenandoash-gc"}},[a._v("Shenandoash GC")])]),t("li",[t("a",{attrs:{href:"#革命性的zgc"}},[a._v("革命性的ZGC")])]),t("li",[t("a",{attrs:{href:"#aligc"}},[a._v("AliGC")])])])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"gc分类与性能指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc分类与性能指标"}},[a._v("#")]),a._v(" GC分类与性能指标")]),a._v(" "),t("p",[a._v("垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的 JVM 来实现。")]),a._v(" "),t("p",[a._v("由于 JDK 的版本处于高速迭代过程中，因此 Java 发展至今已经衍生了众多的 GC 版本。")]),a._v(" "),t("p",[a._v("从不同角度分析垃圾收集器，可以将 GC 分为不同的类型。")]),a._v(" "),t("p",[a._v("Java 不同版本新特性")]),a._v(" "),t("ul",[t("li",[a._v("语法层面：Lambda 表达式、switch、自动拆箱装箱、enum")]),a._v(" "),t("li",[a._v("API 层面：Stream API、新的日期时间、Optional、String、集合框架")]),a._v(" "),t("li",[a._v("底层优化：JVM 优化、GC 的变化、元空间、静态域、字符串常量池位置变化")])]),a._v(" "),t("h3",{attrs:{id:"垃圾收集器分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器分类"}},[a._v("#")]),a._v(" 垃圾收集器分类")]),a._v(" "),t("blockquote",[t("p",[a._v("按线程数分")])]),a._v(" "),t("p",[t("strong",[a._v("按线程数分")]),a._v("（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116165611.png",alt:"image-20200713083030867"}})]),a._v(" "),t("p",[a._v("串行回收指的是在同一时间段内只允许有一个 CPU 用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。")]),a._v(" "),t("ul",[t("li",[a._v("在诸如单 CPU 处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的 Client 模式下的 JVM 中")]),a._v(" "),t("li",[a._v("在并发能力比较强的 CPU 上，并行回收器产生的停顿时间要短于串行回收器")])]),a._v(" "),t("p",[a._v("和串行回收相反，并行收集可以运用多个 CPU 同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了 "),t("code",[a._v("stop-the-world")]),a._v(" 机制。")]),a._v(" "),t("blockquote",[t("p",[a._v("按工作模式分")])]),a._v(" "),t("p",[a._v("按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。")]),a._v(" "),t("ul",[t("li",[a._v("并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。")]),a._v(" "),t("li",[a._v("独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116165658.png",alt:"image-20200713083443486"}})]),a._v(" "),t("blockquote",[t("p",[a._v("按碎片处理方式分")])]),a._v(" "),t("p",[a._v("按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。")]),a._v(" "),t("ul",[t("li",[a._v("压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片")]),a._v(" "),t("li",[a._v("非压缩式的垃圾回收器不进行这步操作")])]),a._v(" "),t("p",[a._v("按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。")]),a._v(" "),t("h3",{attrs:{id:"评估gc的性能指标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#评估gc的性能指标"}},[a._v("#")]),a._v(" 评估GC的性能指标")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("吞吐量")]),a._v("：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）")]),a._v(" "),t("li",[t("strong",[a._v("垃圾收集开销")]),a._v("：吞吐量的补数，垃圾收集所用时间与总运行时间的比例")]),a._v(" "),t("li",[t("strong",[a._v("暂停时间")]),a._v("：执行垃圾收集时，程序的工作线程被暂停的时间")]),a._v(" "),t("li",[t("strong",[a._v("收集频率")]),a._v("：相对于应用程序的执行，收集操作发生的频率")]),a._v(" "),t("li",[t("strong",[a._v("内存占用")]),a._v("：Java 堆区所占的内存大小")]),a._v(" "),t("li",[t("strong",[a._v("快速")]),a._v("：一个对象从诞生到被回收所经历的时间")])]),a._v(" "),t("p",[a._v("吞吐量、暂停时间、内存占用这三者共同构成一个「不可能三角」。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。")]),a._v(" "),t("p",[a._v("这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。")]),a._v(" "),t("p",[a._v("简单来说，主要抓住两点：")]),a._v(" "),t("ul",[t("li",[a._v("吞吐量")]),a._v(" "),t("li",[a._v("暂停时间")])]),a._v(" "),t("h3",{attrs:{id:"性能指标之吞吐量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能指标之吞吐量"}},[a._v("#")]),a._v(" 性能指标之吞吐量")]),a._v(" "),t("p",[a._v("吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）")]),a._v(" "),t("blockquote",[t("p",[a._v("比如：虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。")])]),a._v(" "),t("p",[a._v("这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的")]),a._v(" "),t("p",[a._v("吞吐量优先，意味着在单位时间内，STW 的时间最短："),t("code",[a._v("0.2 + 0.2 = 0.4")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116165802.png",alt:"image-20200713084726176"}})]),a._v(" "),t("h3",{attrs:{id:"性能指标之暂停时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能指标之暂停时间"}},[a._v("#")]),a._v(" 性能指标之暂停时间")]),a._v(" "),t("p",[a._v("「暂停时间」是指一个时间段内应用程序线程暂停，让 GC 线程执行的状态。")]),a._v(" "),t("p",[a._v("例如，GC 期间 100 毫秒的暂停时间意味着在这 100 毫秒期间内没有应用程序线程是活动的。暂停时间优先，意味着尽可能让单次 STW 的时间最短："),t("code",[a._v("0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116165845.png",alt:"image-20200713085306400"}})]),a._v(" "),t("h3",{attrs:{id:"吞吐量vs暂停时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量vs暂停时间"}},[a._v("#")]),a._v(" 吞吐量vs暂停时间")]),a._v(" "),t("p",[a._v("高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做「生产性」工作。直觉上，吞吐量越高程序运行越快。")]),a._v(" "),t("p",[a._v("低暂停时间（低延迟）较好因为从最终用户的角度来看不管是 GC 还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的 200 毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。")]),a._v(" "),t("p",[a._v("不幸的是「高吞吐量」和「低暂停时间」是一对相互竞争的目标（矛盾）。")]),a._v(" "),t("p",[a._v("因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致 GC 需要更长的暂停时间来执行内存回收。")]),a._v(" "),t("p",[a._v("相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。")]),a._v(" "),t("p",[a._v("在设计（或使用）GC 算法时，我们必须确定我们的目标：一个 GC 算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折中。")]),a._v(" "),t("p",[a._v("现在的标准："),t("strong",[a._v("在最大吞吐量优先的情况下，降低停顿时间")])]),a._v(" "),t("h2",{attrs:{id:"不同的垃圾回收器概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同的垃圾回收器概述"}},[a._v("#")]),a._v(" 不同的垃圾回收器概述")]),a._v(" "),t("p",[a._v("垃圾收集机制是 Java 的招牌能力，极大地提高了开发效率。这当然也是面试的热点。")]),a._v(" "),t("p",[a._v("那么，Java 常见的垃圾收集器有哪些？")]),a._v(" "),t("p",[a._v("GC 垃圾收集器是和 JVM 一脉相承的，它是和 JVM 进行搭配使用，在不同的使用场景对应的收集器也是有区别。")]),a._v(" "),t("h3",{attrs:{id:"垃圾回收器发展史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器发展史"}},[a._v("#")]),a._v(" 垃圾回收器发展史")]),a._v(" "),t("p",[a._v("有了虚拟机，就一定需要收集垃圾的机制，这就是 Garbage Collection，对应的产品我们称为 Garbage Collector。")]),a._v(" "),t("ul",[t("li",[a._v("1999 年随 JDK1.3.1 一起来的是串行方式的 SerialGC，它是第一款 GC。ParNew 垃圾收集器是 Serial 收集器的多线程版本")]),a._v(" "),t("li",[a._v("2002 年 2 月 26 日，Parallel GC 和 Concurrent Mark Sweep GC 跟随 JDK1.4.2 一起发布")]),a._v(" "),t("li",[a._v("Parallel GC 在 JDK6 之后成为 HotSpot 默认 GC")]),a._v(" "),t("li",[a._v("2012 年，在 JDK1.7u4 版本中，G1 可用")]),a._v(" "),t("li",[a._v("2017 年，JDK9 中 G1 变成默认的垃圾收集器，以替代 CMS")]),a._v(" "),t("li",[a._v("2018 年 3 月，JDK10 中 G1 垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟")]),a._v(" "),t("li",[a._v("2018 年 9 月，JDK11 发布。引入 Epsilon 垃圾回收器，又被称为 No-Op（无操作）回收器。同时，引入 ZGC 可伸缩的低延迟垃圾回收器（Experimental）")]),a._v(" "),t("li",[a._v("2019 年 3 月，JDK12 发布。增强 G1，自动返回未用堆内存给操作系统。同时，引入 Shenandoah GC：低停顿时间的 GC（Experimental）")]),a._v(" "),t("li",[a._v("2019 年 9 月，JDK13 发布。增强 ZGC，自动返回未用堆内存给操作系统")]),a._v(" "),t("li",[a._v("2020 年 3 月，JDK14 发布。删除 CMS 垃圾回收器。扩展 ZGC 在 macos 和 Windows 上的应用")])]),a._v(" "),t("h3",{attrs:{id:"_7种经典的垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7种经典的垃圾收集器"}},[a._v("#")]),a._v(" 7种经典的垃圾收集器")]),a._v(" "),t("ul",[t("li",[a._v("串行回收器：Serial、Serial Old")]),a._v(" "),t("li",[a._v("并行回收器：ParNew、Parallel Scavenge、Parallel Old")]),a._v(" "),t("li",[a._v("并发回收器：CMS、G1")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170201.png",alt:"image-20200713093551365"}})]),a._v(" "),t("h3",{attrs:{id:"_7款经典收集器与垃圾分代之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7款经典收集器与垃圾分代之间的关系"}},[a._v("#")]),a._v(" 7款经典收集器与垃圾分代之间的关系")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170202.png",alt:"image-20200713093757644"}})]),a._v(" "),t("p",[a._v("新生代收集器：Serial、ParNew、Parallel Scavenge；")]),a._v(" "),t("p",[a._v("老年代收集器：Serial Old、Parallel Old、CMS；")]),a._v(" "),t("p",[a._v("整堆收集器：G1。")]),a._v(" "),t("h3",{attrs:{id:"垃圾收集器的组合关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器的组合关系"}},[a._v("#")]),a._v(" 垃圾收集器的组合关系")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170205.png",alt:"image-20200713094745366"}})]),a._v(" "),t("ul",[t("li",[a._v("两个收集器间有连线，表明它们可以搭配使用：Serial / Serial Old、Serial / CMS、ParNew / Serial Old、ParNew / CMS、Parallel Scavenge / Serial Old、Parallel Scavenge / Parallel Old、G1")]),a._v(" "),t("li",[a._v("其中 Serial old 作为 CMS 出现 "),t("code",[a._v("Concurrent Mode Failure")]),a._v(" 失败的后备预案")]),a._v(" "),t("li",[a._v("（红色虚线）由于维护和兼容性测试的成本，在 JDK 8 时将 Serial + CMS、ParNew + Serial old 这两个组合声明为废弃（JEP173），并在 JDK9 中完全取消了这些组合的支持（JEP214），即：移除")]),a._v(" "),t("li",[a._v("（绿色虚线）JDK14 中：弃用 Paralle1 Scavenge 和 Serialold GC 组合（JEP366）")]),a._v(" "),t("li",[a._v("（青色虚线）JDK14 中：删除 CMS 垃圾回收器（JEP363）")])]),a._v(" "),t("p",[a._v("为什么要有很多收集器，一个不够吗？因为 Java 的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。")]),a._v(" "),t("p",[a._v("虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以 "),t("strong",[a._v("我们选择的只是对具体应用最合适的收集器")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"如何查看默认垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何查看默认垃圾收集器"}},[a._v("#")]),a._v(" 如何查看默认垃圾收集器")]),a._v(" "),t("p",[t("code",[a._v("-XX:+PrintcommandLineFlags")]),a._v("：查看命令行相关参数（包含使用的垃圾收集器）。")]),a._v(" "),t("p",[a._v("JDK 8 程序打印输出："),t("code",[a._v("-XX:+UseParallelGC")]),a._v(" 表示使用使用 ParallelGC，ParallelGC 默认和 Parallel Old GC 绑定使用。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InitialHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("266620736")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MaxHeapSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4265931776")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintCommandLineFlags")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedClassPointers")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseCompressedOops")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseLargePagesIndividualAllocation")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParallelGC")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("JDK 9 使用的是 G1 GC。")]),a._v(" "),t("p",[a._v("使用命令行指令："),t("code",[a._v("jinfo -flag 相关垃圾回收器参数 进程ID")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("jps\njinfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("flag "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParallelGC")]),a._v(" 进程id\njinfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("flag "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseParallelOldGC")]),a._v(" 进程id\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"serial回收器-串行回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial回收器-串行回收"}},[a._v("#")]),a._v(" Serial回收器 - 串行回收")]),a._v(" "),t("p",[a._v("Serial 收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3 之前回收新生代唯一的选择。")]),a._v(" "),t("p",[a._v("Serial 收集器作为 HotSpot 中 Client 模式下的默认新生代垃圾收集器。")]),a._v(" "),t("p",[a._v("Serial 收集器采用复制算法、串行回收和 "),t("code",[a._v("stop-the-World")]),a._v(" 机制的方式执行内存回收。")]),a._v(" "),t("p",[a._v("除了年轻代之外，Serial 收集器还提供用于执行老年代垃圾收集的 Serial Old 收集器。Serial Old 收集器同样也采用了串行回收和 "),t("code",[a._v("stop the World")]),a._v(" 机制，只不过内存回收算法使用的是标记-压缩算法。")]),a._v(" "),t("ul",[t("li",[a._v("Serial Old 是运行在 Client 模式下默认的老年代的垃圾回收器")]),a._v(" "),t("li",[a._v("Serial Old 在 Server 模式下主要有两个用途：\n"),t("ul",[t("li",[a._v("与新生代的 Parallel Scavenge 配合使用")]),a._v(" "),t("li",[a._v("作为老年代 CMS 收集器的后备垃圾收集方案")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170422.png",alt:"image-20200713100703799"}})]),a._v(" "),t("p",[a._v("这个收集器是一个单线程的收集器，但它的「单线程」的意义并不仅仅说明它只会使用一个 CPU 或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）。")]),a._v(" "),t("p",[a._v("优势：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。")]),a._v(" "),t("p",[a._v("运行在 Client 模式下的虚拟机是个不错的选择。")]),a._v(" "),t("p",[a._v("在用户的桌面应用场景中，可用内存一般不大（几十 MB 至一两百 MB），可以在较短时间内完成垃圾收集（几十 ms 至一百多 ms），只要不频繁发生，使用串行回收器是可以接受的。")]),a._v(" "),t("p",[a._v("在 HotSpot 虚拟机中，使用 "),t("code",[a._v("-XX:+UseSerialGC")]),a._v(" 参数可以指定年轻代和老年代都使用串行收集器。")]),a._v(" "),t("p",[a._v("等价于新生代用 Serial GC，且老年代用 Serial old GC。")]),a._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[a._v("这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核 CPU 才可以用。现在都不是单核的了。")]),a._v(" "),t("p",[a._v("对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在 Java Web 应用程序中是不会采用串行垃圾收集器的。")]),a._v(" "),t("h2",{attrs:{id:"parnew回收器-并行回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew回收器-并行回收"}},[a._v("#")]),a._v(" ParNew回收器 - 并行回收")]),a._v(" "),t("p",[a._v("如果说 SerialGC 是年轻代中的单线程垃圾收集器，那么 ParNew 收集器则是 Serial 收集器的多线程版本。")]),a._v(" "),t("ul",[t("li",[a._v("Par 是 Parallel 的缩写，New 是只能处理的是新生代")])]),a._v(" "),t("p",[a._v("ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew 收集器在年轻代中同样也是采用复制算法、"),t("code",[a._v("stop-the-World")]),a._v(" 机制。")]),a._v(" "),t("p",[a._v("ParNew 是很多 JVM 运行在 Server 模式下新生代的默认垃圾收集器。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170543.png",alt:"image-20200713102030127"}})]),a._v(" "),t("ul",[t("li",[a._v("对于新生代，回收次数频繁，使用并行方式高效")]),a._v(" "),t("li",[a._v("对于老年代，回收次数少，使用串行方式节省资源（CPU 并行需要切换线程，串行可以省去切换线程的资源）")])]),a._v(" "),t("blockquote",[t("p",[a._v("ParNew 回收器与 Serial 回收器比较")])]),a._v(" "),t("p",[a._v("由于 ParNew 收集器是基于并行回收，那么是否可以断定 ParNew 收集器的回收效率在任何场景下都会比 Serial 收集器更高效？")]),a._v(" "),t("p",[t("strong",[a._v("不能")]),a._v("。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("ParNew 收集器运行在多 CPU 的环境下，由于可以充分利用多 CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量")])]),a._v(" "),t("li",[t("p",[a._v("但是在单个 CPU 的环境下，ParNew 收集器不比 Serial 收集器更高效。虽然 Serial 收集器是基于串行回收，但是由于 CPU 不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销")])]),a._v(" "),t("li",[t("p",[a._v("除 Serial 外，目前只有 ParNew GC 能与 CMS 收集器配合工作")])])]),a._v(" "),t("p",[a._v("在程序中，开发人员可以通过选项 "),t("code",[a._v("-XX：+UseParNewGC")]),a._v(" 手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。")]),a._v(" "),t("p",[t("code",[a._v("-XX:ParallelGCThreads")]),a._v(" 参数限制线程数量，默认开启和 CPU 数据相同的线程数。")]),a._v(" "),t("h2",{attrs:{id:"parallel回收器-吞吐量优先"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel回收器-吞吐量优先"}},[a._v("#")]),a._v(" Parallel回收器 - 吞吐量优先")]),a._v(" "),t("p",[a._v("HotSpot 的年轻代中除了拥有 ParNew 收集器是基于并行回收的以外，Parallel Scavenge 收集器同样也采用了复制算法、并行回收和 "),t("code",[a._v("Stop the World")]),a._v(" 机制。")]),a._v(" "),t("p",[a._v("那么 Parallel 收集器的出现是否多此一举？")]),a._v(" "),t("ul",[t("li",[a._v("和 ParNew 收集器不同，Parallel Scavenge 收集器的目标则是达到一个 "),t("strong",[a._v("可控制的吞吐量")]),a._v("（Throughput），它也被称为吞吐量优先的垃圾收集器")]),a._v(" "),t("li",[a._v("自适应调节策略也是 Paralle1 Scavenge 与 ParNew 一个重要区别")])]),a._v(" "),t("p",[a._v("高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要 "),t("strong",[a._v("适合在后台运算而不要太多交互的任务")]),a._v("。因此，常见在服务器环境中使用。例如，那些执行 "),t("mark",[a._v("批量处理、订单处理、工资支付、科学计算的应用程序")]),a._v("。")]),a._v(" "),t("p",[a._v("Parallel 收集器在 JDK1.6 时提供了用于执行老年代垃圾收集的 Parallel Old 收集器，用来代替老年代的 Serial Old 收集器。")]),a._v(" "),t("p",[a._v("Parallel Old 收集器采用了标记-压缩算法，但同样也是基于并行回收和 "),t("code",[a._v("stop-the-World")]),a._v(" 机制。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116170732.png",alt:"image-20200713110359441"}})]),a._v(" "),t("p",[a._v("在程序吞吐量优先的应用场景中，Parallel 收集器和 Parallel Old 收集器的组合，在 Server 模式下的内存回收性能很不错。在 Java8 中，默认是此垃圾收集器。")]),a._v(" "),t("h3",{attrs:{id:"参数配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数配置"}},[a._v("#")]),a._v(" 参数配置")]),a._v(" "),t("p",[t("code",[a._v("-XX:+UseParallelGC")]),a._v(" 手动指定年轻代使用 Parallel 并行收集器执行内存回收任务。")]),a._v(" "),t("p",[t("code",[a._v("-XX:+UseParallelOldGC")]),a._v(" 手动指定老年代都是使用并行回收收集器。")]),a._v(" "),t("ul",[t("li",[a._v("上面两个参数分别适用于新生代和老年代。默认 JDK8 是开启的")]),a._v(" "),t("li",[a._v("上面两个参数，默认开启一个，另一个也会被开启。"),t("strong",[a._v("（互相激活）")])])]),a._v(" "),t("p",[t("code",[a._v("-XX:ParallelGCThreads")]),a._v(" 设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("在默认情况下，当 CPU 数量小于 8 个，ParallelGcThreads 的值等于 CPU 数量")])]),a._v(" "),t("li",[t("p",[a._v("当 CPU 数量大于 8 个，ParallelGCThreads 的值等于 3 + [5 * CPU Count] / 8]")])])]),a._v(" "),t("p",[t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置垃圾收集器最大停顿时间（即 STW 的时间），单位是毫秒。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("为了尽可能地把停顿时间控制在 "),t("code",[a._v("XX:MaxGCPauseMillis")]),a._v(" 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数")])]),a._v(" "),t("li",[t("p",[a._v("对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合 Parallel，进行控制。该参数使用需谨慎")])])]),a._v(" "),t("p",[t("code",[a._v("-XX:GCTimeRatio")]),a._v(" 垃圾收集时间占总时间的比例（1 /（N + 1））。用于衡量吞吐量的大小。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("取值范围（0，100）。默认值 99，也就是垃圾回收时间不超过 1（垃圾收集时间和垃圾回收时间是对立的）")])]),a._v(" "),t("li",[t("p",[a._v("与前一个 "),t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 参数有一定矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例")])])]),a._v(" "),t("p",[t("code",[a._v("-XX:+UseAdaptivesizepplicy")]),a._v(" 设置 Parallel Scavenge 收集器具有自适应调节策略。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("在这种模式下，年轻代的大小、Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点")])]),a._v(" "),t("li",[t("p",[a._v("在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让虚拟机自己完成调优工作")])])]),a._v(" "),t("h2",{attrs:{id:"cms回收器-低延迟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms回收器-低延迟"}},[a._v("#")]),a._v(" CMS回收器 - 低延迟")]),a._v(" "),t("p",[a._v("在 JDK1.5 时期，Hotspot 推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是 HotSpot 虚拟机中第一款真正意义上的并发收集器，"),t("strong",[a._v("它第一次实现了让垃圾收集线程与用户线程同时工作")]),a._v("。")]),a._v(" "),t("p",[a._v("CMS 收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。")]),a._v(" "),t("p",[a._v("目前很大一部分的 Java 应用集中在互联网站或者 B/S 系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS 收集器就非常符合这类应用的需求。")]),a._v(" "),t("p",[a._v("CMS 的垃圾收集算法采用标记-清除算法，并且也会 "),t("code",[a._v("stop-the-world")])]),a._v(" "),t("p",[a._v("不幸的是，CMS 作为老年代的收集器，却无法与 JDK1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或者 Serial 收集器中的一个。")]),a._v(" "),t("p",[a._v("在 G1 出现之前，CMS 使用还是非常广泛的。一直到今天，仍然有很多系统使用 CMS GC。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116171007.png",alt:"image-20200713205154007"}})]),a._v(" "),t("p",[a._v("CMS 整个过程比之前的收集器要复杂，整个过程分为 4 个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及 STW 的阶段主要是：初始标记和重新标记)")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("初始标记")]),a._v("（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为 "),t("code",[a._v("stop-the-world")]),a._v(" 机制而出现短暂的暂停，这个阶段的主要任务仅仅只是 "),t("strong",[a._v("标记出 GC Roots 能直接关联到的对象")]),a._v("。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快")]),a._v(" "),t("li",[t("strong",[a._v("并发标记")]),a._v("（Concurrent-Mark）阶段：从 GC Roots 的直接关联对象开始遍历整个对象图的过程，如果对象的引用发生变化，标记为 dirty，为下一步的重新标记做准备，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行")]),a._v(" "),t("li",[t("strong",[a._v("重新标记")]),a._v("（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短")]),a._v(" "),t("li",[t("strong",[a._v("并发清除")]),a._v("（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的")])]),a._v(" "),t("p",[a._v("尽管 CMS 收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行 "),t("code",[a._v("Stop-the-World")]),a._v(" 机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要 "),t("code",[a._v("stop-the-World")]),a._v("，只是尽可能地缩短暂停时间。")]),a._v(" "),t("p",[t("strong",[a._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。")])]),a._v(" "),t("p",[a._v("另外，由于在垃圾收集阶段用户线程没有中断，所以在 "),t("strong",[a._v("CMS 回收过程中，还应该确保应用程序用户线程有足够的内存可用")]),a._v("。因此，CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是 "),t("strong",[a._v("当堆内存使用率达到某一阈值时，便开始进行回收")]),a._v("，以确保应用程序在 CMS 工作过程中依然有足够的空间支持应用程序运行。要是 CMS 运行期间预留的内存无法满足程序需要，就会出现一次 "),t("code",[a._v("Concurrent Mode Failure")]),a._v(" 失败，这时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。")]),a._v(" "),t("p",[a._v("CMS 收集器的垃圾收集算法采用的是 "),t("strong",[a._v("标记清除算法")]),a._v("，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么 CMS 在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116171128.png",alt:"image-20200713212230352"}})]),a._v(" "),t("h3",{attrs:{id:"cms为什么不使用标记整理算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms为什么不使用标记整理算法"}},[a._v("#")]),a._v(" CMS为什么不使用标记整理算法？")]),a._v(" "),t("p",[a._v("答案其实很简答，因为当并发清除的时候，用 Compact 整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact 更适合 "),t("code",[a._v("stop the world")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("ul",[t("li",[a._v("并发收集")]),a._v(" "),t("li",[a._v("低延迟")])]),a._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发 Full GC")])]),a._v(" "),t("li",[t("p",[a._v("CMS 收集器对 CPU 资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低")])]),a._v(" "),t("li",[t("p",[a._v("CMS 收集器无法处理 "),t("strong",[a._v("浮动垃圾")]),a._v("。可能出现 "),t("code",[a._v("Concurrent Mode Failure")]),a._v(" 失败而导致另一次 Full GC 的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在 "),t("strong",[a._v("并发清理阶段如果产生新的垃圾对象，CMS 将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收")]),a._v("，从而只能在下一次执行 GC 时释放这些之前未被回收的内存空间")])])]),a._v(" "),t("h3",{attrs:{id:"设置的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置的参数"}},[a._v("#")]),a._v(" 设置的参数")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v("：手动指定使用 CMS 收集器执行内存回收任务")]),a._v(" "),t("p",[a._v("开启该参数后会自动将 "),t("code",[a._v("-XX:+UseParNewGC")]),a._v(" 打开。即：ParNew（Young 区用）+ CMS（Old 区用）+ Serial Old 的组合。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:CMSInitiatingoccupanyFraction")]),a._v("：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收")]),a._v(" "),t("p",[a._v("JDK5 及以前版本的默认值为 68，即当老年代的空间使用率达到 68% 时，会执行一次 CMS 回收。JDK6 及以上版本默认值为 92%。")]),a._v(" "),t("p",[a._v("如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低 CMS 的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低 Full GC 的执行次数。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:+UseCMSCompactAtFullCollection")]),a._v("：用于指定在执行完 Full GC 后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:CMSFullGCsBeforeCompaction")]),a._v("：设置在执行多少次 Full GC 后对内存空间进行压缩整理")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("-XX:ParallelcMSThreads")]),a._v("：设置 CMS 的线程数量")]),a._v(" "),t("p",[a._v("CMS 默认启动的线程数是（Paralle1GCThreads + 3）/ 4，ParallelGCThreads 是年轻代并行收集器的线程数。当 CPU 资源比较紧张时，受到 CMS 收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。")])])]),a._v(" "),t("h3",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("HotSpot 有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC 这三个 GC 有什么不同呢？")]),a._v(" "),t("p",[a._v("请记住以下口令：")]),a._v(" "),t("ul",[t("li",[a._v("如果你想要最小化地使用内存和并行开销，请选 Serial GC")]),a._v(" "),t("li",[a._v("如果你想要最大化应用程序的吞吐量，请选 Parallel GC")]),a._v(" "),t("li",[a._v("如果你想要最小化 GC 的中断或停顿时间，请选 CMS GC")])]),a._v(" "),t("h3",{attrs:{id:"jdk后续版本中cms的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk后续版本中cms的变化"}},[a._v("#")]),a._v(" JDK后续版本中CMS的变化")]),a._v(" "),t("p",[t("strong",[a._v("JDK9 新特性")]),a._v("：CMS 被标记为 Deprecate 了（JEP291），如果对 JDK9 及以上版本的 HotSpot 虚拟机使用参数 "),t("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v(" 来开启 CMS 收集器的话，用户会收到一个警告信息，提示 CMS 未来将会被废弃。")]),a._v(" "),t("p",[a._v("JDK14 新特性：删除 CMS 垃圾回收器（JEP363）移除了 CMS 垃圾收集器，如果在 JDK14 中使用 "),t("code",[a._v("XX:+UseConcMarkSweepGC")]),a._v(" 的话，JVM 不会报错，只是给出一个 warning 信息，但是不会 exit。JVM 会自动回退以默认 GC 方式启动 JVM。")]),a._v(" "),t("h2",{attrs:{id:"g1回收器-区域化分代式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器-区域化分代式"}},[a._v("#")]),a._v(" G1回收器 - 区域化分代式")]),a._v(" "),t("blockquote",[t("p",[a._v("既然我们已经有了前面几个强大的 GC，为什么还要发布 Garbage First（G1）？")])]),a._v(" "),t("p",[a._v("原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有 GC 就不能保证应用程序正常进行，而经常造成 STW 的 GC 又跟不上实际的需求，所以才会不断地尝试对 GC 进行优化。G1（Garbage-First）垃圾回收器是在 Java7 update4 之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。")]),a._v(" "),t("p",[a._v("与此同时，"),t("strong",[a._v("为了适应现在不断扩大的内存和不断增加的处理器数量")]),a._v("，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。")]),a._v(" "),t("p",[t("strong",[a._v("官方给 G1 设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起「全功能收集器」的重任与期望")]),a._v("。")]),a._v(" "),t("blockquote",[t("p",[a._v("为什么名字叫 Garbage First（G1）呢？")])]),a._v(" "),t("p",[a._v("因为 G1 是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的 Region 来表示 Eden、幸存者 0 区，幸存者 1 区，老年代等。")]),a._v(" "),t("p",[a._v("G1 GC 有计划地避免在整个 Java 堆中进行全区域的垃圾收集。G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),t("strong",[a._v("每次根据允许的收集时间，优先回收价值最大的 Region")]),a._v("。")]),a._v(" "),t("p",[a._v("由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给 G1 一个名字：垃圾优先（Garbage First）。")]),a._v(" "),t("p",[a._v("G1（Garbage First）是一款面向服务端应用的垃圾收集器，"),t("strong",[a._v("主要针对配备多核 CPU 及大容量内存的机器")]),a._v("，以极高概率满足 GC 停顿时间的同时，还兼具高吞吐量的性能特征。")]),a._v(" "),t("p",[a._v("在 JDK1.7 版本正式启用，移除了 Experimental 的标识，"),t("strong",[a._v("是 JDK9 以后的默认垃圾回收器")]),a._v("，取代了 CMS 回收器以及 Parallel + Parallel Old 组合。被 Oracle 官方称为 "),t("strong",[a._v("全功能的垃圾收集器")]),a._v("。")]),a._v(" "),t("p",[a._v("与此同时，CMS 已经在 JDK9 中被标记为废弃（deprecated）。"),t("strong",[a._v("G1 在 JDK8 中还不是默认的垃圾回收器")]),a._v("，需要使用 "),t("code",[a._v("-XX:+UseG1GC")]),a._v(" 来启用。")]),a._v(" "),t("h3",{attrs:{id:"g1垃圾收集器的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器的优点"}},[a._v("#")]),a._v(" G1垃圾收集器的优点")]),a._v(" "),t("p",[a._v("与其他 GC 收集器相比，G1 使用了全新的分区算法，其特点如下所示：")]),a._v(" "),t("p",[t("strong",[a._v("并行与并发")])]),a._v(" "),t("ul",[t("li",[a._v("并行性：G1 在回收期间，可以有多个 GC 线程同时工作，有效利用多核计算能力。此时用户线程 STW")]),a._v(" "),t("li",[a._v("并发性：G1 拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况")])]),a._v(" "),t("p",[t("strong",[a._v("分代收集")])]),a._v(" "),t("ul",[t("li",[a._v("从分代上看，"),t("strong",[a._v("G1 依然属于分代型垃圾回收器")]),a._v("，它会区分年轻代和老年代，年轻代依然有 Eden 区和 Survivor 区。但从堆的结构上看，它不要求整个 Eden 区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量")]),a._v(" "),t("li",[t("strong",[a._v("将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代")])]),a._v(" "),t("li",[a._v("和之前的各类回收器不同，它同时 "),t("strong",[a._v("兼顾年轻代和老年代")]),a._v("。对比其他回收器，或者工作在年轻代，或者工作在老年代")])]),a._v(" "),t("p",[a._v("G1 所谓的分代，已经不是下面这样的了")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116171712.png",alt:"image-20200713215105293"}})]),a._v(" "),t("p",[a._v("而是这样的一个区域")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116171721.png",alt:"image-20200713215133839"}})]),a._v(" "),t("p",[t("strong",[a._v("空间整合")])]),a._v(" "),t("ul",[t("li",[a._v("CMS：「标记-清除」算法、内存碎片、若干次 GC 后进行一次碎片整理")]),a._v(" "),t("li",[a._v("G1 将内存划分为一个个的 Region。内存的回收是以 Region 作为基本单位的。Region 之间是 "),t("strong",[a._v("复制算法")]),a._v("，但整体上实际可看作是 "),t("strong",[a._v("标记-压缩（Mark-Compact）算法")]),a._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次 GC。尤其是当 Java 堆非常大的时候，G1 的优势更加明显")])]),a._v(" "),t("p",[t("strong",[a._v("可预测的停顿时间模型（即：软实时 soft real-time）")])]),a._v(" "),t("p",[a._v("这是 G1 相对于 CMS 的另一大优势，G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。")]),a._v(" "),t("ul",[t("li",[a._v("由于分区的原因，G1 可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制")]),a._v(" "),t("li",[a._v("G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),t("strong",[a._v("每次根据允许的收集时间，优先回收价值最大的 Region")]),a._v("。保证了 G1 收集器在有限的时间内可以 "),t("strong",[a._v("获取尽可能高的收集效率")])]),a._v(" "),t("li",[a._v("相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延时停顿，但是最差情况要好很多")])]),a._v(" "),t("h3",{attrs:{id:"g1垃圾收集器的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器的缺点"}},[a._v("#")]),a._v(" G1垃圾收集器的缺点")]),a._v(" "),t("p",[a._v("相较于 CMS，G1 还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1 无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比 CMS 要高。")]),a._v(" "),t("p",[a._v("从经验上来说，在小内存应用上 CMS 的表现大概率会优于 G1，而 G1 在大内存应用上则发挥其优势。平衡点在 6-8GB 之间。")]),a._v(" "),t("ul",[t("li",[a._v("停顿时间过长，通常 G1 的停顿时间要达到几十到几百毫秒；这个数字其实已经非常小了，但是我们知道垃圾回收发生导致应用程序在这几十或者几百毫秒中不能提供服务，在某些场景中，特别是对用户体验有较高要求的情况下不能满足实际需求")]),a._v(" "),t("li",[a._v("内存利用率不高，通常引用关系的处理需要额外消耗内存，一般占整个内存的 1%~20% 左右")]),a._v(" "),t("li",[a._v("支持的内存空间有限，不适用于超大内存的系统，特别是在内存容量高于 100GB 的系统中，会因内存过大而导致停顿时间增长")])]),a._v(" "),t("h3",{attrs:{id:"g1参数设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1参数设置"}},[a._v("#")]),a._v(" G1参数设置")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("-XX:+UseG1GC")]),a._v(" 手动指定使用 G1 垃圾收集器执行内存回收任务")]),a._v(" "),t("li",[t("code",[a._v("-XX:G1HeapRegionSize")]),a._v(" 设置每个 Region 的大小。值是 2 的幂，范围是 1MB 到 32MB 之间，目标是根据最小的 Java 堆大小划分出约 2048 个区域。默认是堆内存的 1/2000")]),a._v(" "),t("li",[t("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置期望达到的最大 GC 停顿时间指标（JVM 会尽力实现，但不保证达到）。默认值是 200ms")]),a._v(" "),t("li",[t("code",[a._v("-XX:+ParallelGcThread")]),a._v(" 设置 STW 时，GC 线程数的值。最多设置为 8")]),a._v(" "),t("li",[t("code",[a._v("-XX:ConcGCThreads")]),a._v(" 设置并发标记的线程数。将 N 设置为并行垃圾回收线程数（ParallelGcThreads）的 1/4 左右")]),a._v(" "),t("li",[t("code",[a._v("-XX:InitiatingHeapoccupancyPercent")]),a._v(" 设置触发并发 GC 周期的 Java 堆占用率阈值。超过此值，就触发 GC。默认值是 45")])]),a._v(" "),t("h3",{attrs:{id:"g1收集器的常见操作步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的常见操作步骤"}},[a._v("#")]),a._v(" G1收集器的常见操作步骤")]),a._v(" "),t("p",[a._v("G1 的设计原则就是简化 JVM 性能调优，开发人员只需要简单的三步即可完成调优：")]),a._v(" "),t("ul",[t("li",[a._v("第一步：开启 G1 垃圾收集器")]),a._v(" "),t("li",[a._v("第二步：设置堆的最大内存")]),a._v(" "),t("li",[a._v("第三步：设置最大的停顿时间")])]),a._v(" "),t("p",[a._v("G1 中提供了三种垃圾回收模式：Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。")]),a._v(" "),t("h3",{attrs:{id:"g1收集器的适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的适用场景"}},[a._v("#")]),a._v(" G1收集器的适用场景")]),a._v(" "),t("p",[a._v("面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）")]),a._v(" "),t("p",[a._v("最主要的应用是需要低 GC 延迟，并具有大堆的应用程序提供解决方案；")]),a._v(" "),t("p",[a._v("如：在堆大小约 6GB 或更大时，可预测的暂停时间可以低于 0.5 秒；（G1 通过每次只清理一部分而不是全部的 Region 的增量式清理来保证每次 GC 停顿时间不会过长）。")]),a._v(" "),t("p",[a._v("用来替换掉 JDK1.5 中的 CMS 收集器；在下面的情况时，使用 G1 可能比 CMS 好：")]),a._v(" "),t("ul",[t("li",[a._v("超过 50% 的 Java 堆被活动数据占用")]),a._v(" "),t("li",[a._v("对象分配频率或年代提升频率变化很大")]),a._v(" "),t("li",[a._v("GC 停顿时间过长（长于 0.5 至 1 秒）")])]),a._v(" "),t("p",[a._v("HotSpot 垃圾收集器里，除了 G1 以外，其他的垃圾收集器使用内置的 JVM 线程执行 GC 的多线程操作，而 G1 可以采用应用线程承担后台运行的 GC 工作，即当 JVM 的 GC 线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。")]),a._v(" "),t("h3",{attrs:{id:"分区region-化整为零"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分区region-化整为零"}},[a._v("#")]),a._v(" 分区Region - 化整为零")]),a._v(" "),t("p",[a._v("使用 G1 收集器时，它将整个 Java 堆划分成约 2048 个大小相同的独立 Region 块，每个 Region 块大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32MB 之间，且为 2 的 N 次幂，即 1MB，2MB，4MB，8MB，16MB，32MB。可以通过")]),a._v(" "),t("p",[t("code",[a._v("XX:G1HeapRegionsize")]),a._v(" 设定。"),t("strong",[a._v("所有的 Region 大小相同，且在 JVM 生命周期内不会被改变")]),a._v("。")]),a._v(" "),t("p",[a._v("虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分 Region（不需要连续）的集合。通过 Region 的动态分配方式实现逻辑上的连续。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172110.png",alt:"image-20200713223244886"}})]),a._v(" "),t("p",[a._v("一个 Region 有可能属于 Eden，Survivor 或者 Old / Tenured 内存区域。但是一个被使用的 Region 只可能属于一个角色（被清除后可以变成其他区的 Region）。图中的 E 表示该 Region 属于 Eden 内存区域，S 表示属于 Survivor 内存区域，O 表示属于 Old 内存区域。图中空白的表示未使用的内存空间。")]),a._v(" "),t("p",[a._v("G1 垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域，如图中的 H 块。主要用于存储大对象，如果超过 1.5 个 Region，就放到 H。")]),a._v(" "),t("p",[t("strong",[a._v("设置 H 的原因")]),a._v("：对于堆中的对象，默认直接会被分配到老年代，但是如果 "),t("strong",[a._v("它是一个短期存在的大对象")]),a._v(" 就会对垃圾收集器造成负面影响。为了解决这个问题，G1 划分了一个 Humongous 区，它用来专门存放大对象。"),t("strong",[a._v("如果一个 H 区装不下一个大对象，那么 G1 会寻找连续的 H 区来存储")]),a._v("。为了能找到连续的 H 区，有时候不得不启动 Full GC。G1 的大多数行为都把 H 区作为老年代的一部分来看待。")]),a._v(" "),t("p",[a._v("每个 Region 都是通过指针碰撞来分配空间")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172230.png",alt:"image-20200713223509993"}})]),a._v(" "),t("h3",{attrs:{id:"g1垃圾回收器的回收过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾回收器的回收过程"}},[a._v("#")]),a._v(" G1垃圾回收器的回收过程")]),a._v(" "),t("p",[a._v("G1 的垃圾回收过程主要包括如下三个环节：")]),a._v(" "),t("ul",[t("li",[a._v("年轻代 GC（Young GC）")]),a._v(" "),t("li",[a._v("老年代并发标记过程（Concurrent Marking）")]),a._v(" "),t("li",[a._v("混合回收（Mixed GC）")])]),a._v(" "),t("p",[a._v("如果需要，单线程、独占式、高强度的 Full GC 还是继续存在的。它针对 GC 的评估失败提供了一种失败保护机制，即强力回收。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172253.png",alt:"image-20200713224113996"}})]),a._v(" "),t("p",[a._v("顺时针，"),t("code",[a._v("Young GC -> Young GC + Concurrent Mark -> Mixed GC")]),a._v(" 顺序，进行垃圾回收。")]),a._v(" "),t("p",[a._v("应用程序分配内存，当年轻代的 Eden 区用尽时开始年轻代回收过程；G1 的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 暂停所有应用程序线程，启动多线程执行年轻代回收。然后 "),t("strong",[a._v("从年轻代区间移动存活对象到 Survivor 区间或者老年区间，也有可能是两个区间都会涉及")]),a._v("。")]),a._v(" "),t("p",[a._v("当堆内存使用达到一定值（默认 45%）时，开始老年代并发标记过程。")]),a._v(" "),t("p",[a._v("标记完成马上开始混合回收过程。对于一个混合回收期，G1 从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的 G1 回收器和其他 GC 不同，"),t("strong",[a._v("G1 的老年代回收器不需要整个老年代被回收，一次只需要扫描 / 回收一小部分老年代的 Region 就可以了")]),a._v("。同时，这个老年代 Region 是和年轻代一起被回收的。")]),a._v(" "),t("p",[a._v("举个例子：一个 Web 服务器，Java 进程最大堆内存为 4G，每分钟响应 1500 个请求，每 45 秒钟会新分配大约 2G 的内存。G1 会每 45 秒钟进行一次年轻代回收，每 31 个小时整个堆的使用率会达到 45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。")]),a._v(" "),t("h3",{attrs:{id:"remembered-set-记忆集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remembered-set-记忆集"}},[a._v("#")]),a._v(" Remembered Set（记忆集）")]),a._v(" "),t("p",[a._v("一个对象被不同区域引用的问题。")]),a._v(" "),t("p",[a._v("一个 Region 不可能是孤立的，一个 Region 中的对象可能被其他任意 Region 中对象引用，判断对象存活时，是否需要扫描整个 Java 堆才能保证准确？")]),a._v(" "),t("p",[a._v("在其他的分代收集器，也存在这样的问题（而 G1 更突出）。")]),a._v(" "),t("p",[a._v("回收新生代也不得不同时扫描老年代？（可能老年代有对象引用了新生代的对象）")]),a._v(" "),t("p",[a._v("这样的话会降低 MinorGC 的效率。")]),a._v(" "),t("p",[t("strong",[a._v("解决方法：")])]),a._v(" "),t("p",[a._v("无论 G1 还是其他分代收集器，JVM 都是使用 Remembered Set 来避免全局扫描。")]),a._v(" "),t("p",[a._v("每个 Region 都有一个对应的 Remembered Set；每次 Reference 类型数据写操作时，都会产生一个 Write Barrier 暂时中断操作；")]),a._v(" "),t("p",[a._v("然后检查将要写入的引用指向的对象是否和该 Reference 类型数据在不同的 Region（其他收集器：检查老年代对象是否引用了新生代对象）；如果不同，通过cardTable 把相关引用信息记录到引用指向对象的所在 Region 对应的 Remembered Set 中；当进行垃圾收集时，在 GC 根节点的枚举范围加入 Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。")]),a._v(" "),t("p",[a._v("也就是老年代对象和新生代对象之间存在引用，则记录在记忆集里，方便 G1 回收时，遍历记忆集，找不出不存在引用的对象进行清除。")]),a._v(" "),t("p",[a._v("如下图所示，每个 Region 都有一个记忆集（Rset），记忆集会记录下当前这个 Region 中的对象被哪些对象所引用。例如，Region2 中的两个对象分别被 Region1 中的对象和 Region3 中的对象所引用，那么，Region2 的记忆集记录的就是 Region1 和 Region3 中的引用 Region2 的对象的引用。")]),a._v(" "),t("p",[a._v("这样一来在回收 Region2 的时候，就不用扫描全部的 Region 了，只需要访问记忆集，就知道当前 Region2 里面的对象被哪些对象所引用，判断其是不是存活对象。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172503.png",alt:"image-20200713224716715"}})]),a._v(" "),t("h3",{attrs:{id:"g1回收过程-年轻代gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-年轻代gc"}},[a._v("#")]),a._v(" G1回收过程 - 年轻代GC")]),a._v(" "),t("p",[a._v("JVM 启动时，G1 先准备好 Eden 区，程序在运行过程中不断创建对象到 Eden 区，当 Eden 空间耗尽时，G1 会启动一次年轻代垃圾回收过程。")]),a._v(" "),t("p",[a._v("GC 时，首先 G1 停止应用程序的执行（stop-The-Wor1d），G1 创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代 Eden 区和 Survivor 区所有的内存分段。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172530.png",alt:"image-20200713225100632"}})]),a._v(" "),t("p",[a._v("然后开始如下回收过程：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("第一阶段，扫描根")]),a._v(" "),t("p",[a._v("根是指 static 变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同 RSet 记录的外部引用作为扫描存活对象的入口。")])]),a._v(" "),t("li",[t("p",[a._v("第二阶段，更新 RSet")]),a._v(" "),t("p",[a._v("处理 dirty card queue（见下方备注）中的 card，更新 RSet。此阶段完成后，RSet 可以准确的反映老年代对所在的内存分段中对象的引用。")])]),a._v(" "),t("li",[t("p",[a._v("第三阶段，处理 RSet")]),a._v(" "),t("p",[a._v("识别被老年代对象指向的 Eden 中的对象，这些被指向的 Eden 中的对象被认为是存活的对象。")])]),a._v(" "),t("li",[t("p",[a._v("第四阶段，复制对象（耗时）")]),a._v(" "),t("p",[a._v("此阶段，对象树被遍历，Eden 区内存段中存活的对象会被复制到 Survivor 区中空的内存分段，Survivor 区内存段中存活的对象如果年龄未达阈值，年龄会加 1，达到阀值会被会被复制到 Old 区中空的内存分段。如果 Survivor 空间不够，Eden 空间的部分数据会直接晋升到老年代空间。")])]),a._v(" "),t("li",[t("p",[a._v("第五阶段，处理引用")]),a._v(" "),t("p",[a._v("处理 Soft，Weak，Phantom，Final，JNI Weak 等引用。最终 Eden 空间的数据为空，GC 停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。")])])]),a._v(" "),t("blockquote",[t("p",[a._v("备注")])]),a._v(" "),t("p",[a._v("对于应用程序的引用赋值语句 "),t("code",[a._v("oldObject.field（这个是老年代）= object（这个是新生代）")]),a._v("，JVM 会在之前和之后执行特殊的操作以在 dirty card queue 中入队一个保存了对象引用信息的 card。在年轻代回收的时候，G1 会对 Dirty Card Queue 中所有的 card 进行处理，以更新 RSet，保证 RSet 实时准确的反映引用关系。")]),a._v(" "),t("p",[a._v("那为什么不在引用赋值语句处直接更新 RSet 呢？这是为了性能的需要，RSet 的处理需要线程同步，开销会很大，使用队列性能会好很多。")]),a._v(" "),t("h3",{attrs:{id:"g1回收过程-老年代gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-老年代gc"}},[a._v("#")]),a._v(" G1回收过程 - 老年代GC")]),a._v(" "),t("ul",[t("li",[a._v("初始标记阶段：标记从根节点直接可达的对象。这个阶段是 STW 的，并且会触发一次年轻代 GC。")]),a._v(" "),t("li",[a._v("根区域扫描（Root Region Scanning）：G1 GC 扫描 Survivor 区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在 YoungGC 之前完成。")]),a._v(" "),t("li",[a._v("并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被 Young GC 中断。"),t("strong",[a._v("在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收")]),a._v("。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。")]),a._v(" "),t("li",[a._v("再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是 STW 的。G1 中采用了比 CMS 更快的初始快照算法："),t("code",[a._v("snapshot-at-the-beginning")]),a._v("（SATB）。")]),a._v(" "),t("li",[a._v("独占清理（cleanup，STW）：计算各个区域的存活对象和 GC 回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是 STW 的。这个阶段并不会实际上去做垃圾的收集")]),a._v(" "),t("li",[a._v("并发清理阶段：识别并清理完全空闲的区域")])]),a._v(" "),t("h3",{attrs:{id:"g1回收过程-混合回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程-混合回收"}},[a._v("#")]),a._v(" G1回收过程 - 混合回收")]),a._v(" "),t("p",[a._v("当越来越多的对象晋升到老年代 Old Region 时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即 Mixed GC，该算法并不是一个 Old GC，除了回收整个 Young Region，还会回收一部分的 Old Region。这里需要注意："),t("strong",[a._v("是一部分老年代，而不是全部老年代")]),a._v("。可以选择哪些 Old Region 进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是 Mixed GC 并不是 Full GC。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172755.png",alt:"image-20200713225810871"}})]),a._v(" "),t("p",[a._v("并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分 8 次（可以通过 "),t("code",[a._v("-XX:G1MixedGCCountTarget")]),a._v(" 设置）被回收")]),a._v(" "),t("p",[a._v("混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden 区内存分段，Survivor 区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。")]),a._v(" "),t("p",[a._v("由于老年代中的内存分段默认分 8 次回收，G1 会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，")]),a._v(" "),t("p",[a._v("XX:G1MixedGCLiveThresholdPercent，默认为 65%，意思是垃圾占内存分段比例要达到 65% 才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。")]),a._v(" "),t("p",[a._v("混合回收并不一定要进行 8 次。有一个阈值 -XX:G1HeapWastePercent，默认值为 10%，意思是允许整个堆内存中有 10% 的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于 10%，则不再进行混合回收。因为 GC 会花费很多的时间但是回收到的内存却很少。")]),a._v(" "),t("h3",{attrs:{id:"g1回收可选的过程-full-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收可选的过程-full-gc"}},[a._v("#")]),a._v(" G1回收可选的过程 - Full GC")]),a._v(" "),t("p",[a._v("G1 的初衷就是要避免 Full GC 的出现。但是如果上述方式不能正常工作，G1 会停止应用程序的执行（stop-The-world），使用 "),t("strong",[a._v("单线程")]),a._v(" 的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。")]),a._v(" "),t("p",[a._v("要避免 Full GC 的发生，一旦发生需要进行调整。什么时候会发生 Full GC 呢？比如堆内存太小，当 G1 在复制存活对象的时候没有空的内存分段可用，则会回退到 Full GC，这种情况可以通过增大内存解决。")]),a._v(" "),t("p",[a._v("导致 Full GC 的原因可能有两个：")]),a._v(" "),t("ul",[t("li",[a._v("回收阶段的时候没有足够的 to-space 来存放晋升的对象")]),a._v(" "),t("li",[a._v("并发处理过程完成之前空间耗尽")])]),a._v(" "),t("h3",{attrs:{id:"g1回收的优化建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1回收的优化建议"}},[a._v("#")]),a._v(" G1回收的优化建议")]),a._v(" "),t("p",[a._v("从 Oracle 官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到 G1 只是回一部分 Region，停顿时间是用户可控制的，所以并不迫切去实现，"),t("strong",[a._v("而选择把这个特性放到了 G1 之后出现的低延迟垃圾收集器（即 ZGC）中")]),a._v("。另外，还考虑到 G1 不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。")]),a._v(" "),t("p",[a._v("年轻代大小")]),a._v(" "),t("ul",[t("li",[a._v("避免使用 "),t("code",[a._v("-Xmn")]),a._v(" 或 "),t("code",[a._v("-XX:NewRatio")]),a._v(" 等相关选项显式设置年轻代大小")]),a._v(" "),t("li",[a._v("固定年轻代的大小会覆盖")])]),a._v(" "),t("p",[a._v("暂停时间目标暂停时间目标不要太过严苛")]),a._v(" "),t("ul",[t("li",[a._v("G1 的吞吐量目标是 90% 的应用程序时间和 10% 的垃圾回收时间")]),a._v(" "),t("li",[a._v("评估 G1 的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量")])]),a._v(" "),t("h2",{attrs:{id:"垃圾回收器总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器总结"}},[a._v("#")]),a._v(" 垃圾回收器总结")]),a._v(" "),t("p",[a._v("截止 JDK1.8，一共有 7 款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116172945.png",alt:"image-20200714075738203"}})]),a._v(" "),t("p",[a._v("GC 发展阶段：Serial => Parallel（并行）=> CMS（并发）=> G1 => ZGC")]),a._v(" "),t("p",[a._v("不同厂商、不同版本的虚拟机实现差距比较大。HotSpot 虚拟机在 JDK7/8 后所有收集器及组合如下图：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173000.png",alt:"image-20200714080151020"}})]),a._v(" "),t("h3",{attrs:{id:"怎么选择垃圾回收器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么选择垃圾回收器"}},[a._v("#")]),a._v(" 怎么选择垃圾回收器")]),a._v(" "),t("p",[a._v("Java 垃圾收集器的配置对于 JVM 优化来说是一个很重要的选择，选择合适的垃圾收集器可以让 JVM 的性能有一个很大的提升。怎么选择垃圾收集器？")]),a._v(" "),t("ul",[t("li",[a._v("优先调整堆的大小让 JVM 自适应完成")]),a._v(" "),t("li",[a._v("如果内存小于 100M，使用串行收集器")]),a._v(" "),t("li",[a._v("如果是单核、单机程序，并且没有停顿时间的要求，串行收集器")]),a._v(" "),t("li",[a._v("如果是多 CPU、需要高吞吐量、允许停顿时间超过 1 秒，选择并行收集器或者 JVM 自己选择")]),a._v(" "),t("li",[a._v("如果是多 CPU、追求低停顿时间，需快速响应（比如延迟不能超过 1 秒，如互联网应用），使用并发收集器")]),a._v(" "),t("li",[a._v("官方推荐 G1，性能高。"),t("strong",[a._v("现在互联网的项目，基本都是使用 G1")])])]),a._v(" "),t("p",[a._v("最后需要明确一个观点：")]),a._v(" "),t("ul",[t("li",[a._v("没有最好的收集器，更没有万能的收集")]),a._v(" "),t("li",[a._v("调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器")])]),a._v(" "),t("h3",{attrs:{id:"面试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试"}},[a._v("#")]),a._v(" 面试")]),a._v(" "),t("p",[a._v("对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。")]),a._v(" "),t("p",[a._v("这里较通用、基础性的部分如下：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("垃圾收集的算法有哪些？如何判断一个对象是否可以回收")])]),a._v(" "),t("li",[t("p",[a._v("垃圾收集器工作的基本流程")])]),a._v(" "),t("li",[t("p",[a._v("另外，大家需要多关注垃圾回收器这一章的各种常用的参数")])])]),a._v(" "),t("h2",{attrs:{id:"gc日志分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析"}},[a._v("#")]),a._v(" GC日志分析")]),a._v(" "),t("p",[a._v("通过阅读 GC 日志，我们可以了解 Java 虚拟机内存分配与回收策略。")]),a._v(" "),t("p",[a._v("内存分配与垃圾回收的参数列表")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("-XX:+PrintGC")]),a._v("：输出 GC 日志。类似："),t("code",[a._v("-verbose:gc")])]),a._v(" "),t("li",[t("code",[a._v("-XX:+PrintGCDetails")]),a._v("：输出 GC 的详细日志")]),a._v(" "),t("li",[t("code",[a._v("-XX:+PrintGCTimestamps")]),a._v("：输出 GC 的时间戳（以基准时间的形式）")]),a._v(" "),t("li",[t("code",[a._v("-XX:+PrintGCDatestamps")]),a._v("：输出 GC 的时间戳（以日期的形式，如 2013-05-04T21: 53: 59.234 +0800）")]),a._v(" "),t("li",[t("code",[a._v("-XX:+PrintHeapAtGC")]),a._v("：在进行 GC 的前后打印出堆的信息")]),a._v(" "),t("li",[t("code",[a._v("-Xloggc:…/logs/gc.log")]),a._v("：日志文件的输出路径")])]),a._v(" "),t("h3",{attrs:{id:"verbose-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verbose-gc"}},[a._v("#")]),a._v(" verbose:gc")]),a._v(" "),t("p",[a._v("打开 GC 日志")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-verbose:gc")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这个只会显示总的 GC 堆的变化，显示如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173124.png",alt:"image-20200714081610474"}})]),a._v(" "),t("p",[a._v("参数解析：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173126.png",alt:"image-20200714081622526"}})]),a._v(" "),t("h3",{attrs:{id:"printgcdetails"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#printgcdetails"}},[a._v("#")]),a._v(" PrintGCDetails")]),a._v(" "),t("p",[a._v("打开 GC 日志")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-verbose:gc")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-XX:+PrintGCDetails")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("输入信息如下")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173132.png",alt:"image-20200714081909309"}})]),a._v(" "),t("p",[a._v("参数解析")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173133.png",alt:"image-20200714081925767"}})]),a._v(" "),t("h3",{attrs:{id:"补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[a._v("#")]),a._v(" 补充")]),a._v(" "),t("ul",[t("li",[a._v("GC 和 Full GC 说明了这次垃圾收集的停顿类型，如果有 Full GC，则说明 GC 发生了 "),t("code",[a._v("Stop The World")])]),a._v(" "),t("li",[a._v("使用 Serial 收集器在新生代的名字是 Default New Generation，因此显示的是 DefNew")]),a._v(" "),t("li",[a._v("使用 ParNew 收集器在新生代的名字会变成 ParNew，意思是 "),t("code",[a._v("Parallel New Generation")])]),a._v(" "),t("li",[a._v("使用 Parallel Scavenge 收集器在新生代的名字是 PSYoungGen")]),a._v(" "),t("li",[a._v("老年代的收集和新生代道理一样，名字也是收集器决定的")]),a._v(" "),t("li",[a._v("使用 G1 收集器的话，会显示为 "),t("code",[a._v("garbage-first heap")])])]),a._v(" "),t("p",[t("code",[a._v("Allocation Failure")]),a._v(" 表明本次引起 GC 的原因是因为在年轻代中没有足够的空间能够存储新的数据了。")]),a._v(" "),t("p",[a._v("[PSYoungGen：5986K -> 696K（8704K）] 5986K -> 704K（9216K）中括号内：GC 回收前年轻代大小，回收后大小，（年轻代总大小）括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）。")]),a._v(" "),t("p",[a._v("user 代表用户态回收耗时，sys 内核态回收耗时，real 实际耗时。由于多核的原因，user 时间总和可能会超过 real 时间。")]),a._v(" "),t("h3",{attrs:{id:"young-gc图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#young-gc图片"}},[a._v("#")]),a._v(" Young GC图片")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173140.png",alt:"image-20200714082555688"}})]),a._v(" "),t("h3",{attrs:{id:"full-gc图片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#full-gc图片"}},[a._v("#")]),a._v(" Full GC图片")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173141.png",alt:"image-20200714082714690"}})]),a._v(" "),t("h3",{attrs:{id:"gc回收举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc回收举例"}},[a._v("#")]),a._v(" GC回收举例")]),a._v(" "),t("p",[a._v("我们编写一个程序，用来说明 GC 收集的过程")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 在 jdk7 和 jdk8 中分别执行\n * -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC\n */")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GCLogTest1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" _1MB "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("testAllocation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" allocation1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" allocation2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" allocation3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" allocation4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        allocation1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" _1MB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        allocation2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" _1MB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        allocation3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" _1MB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        allocation4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" _1MB"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" agrs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("testAllocation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("p",[a._v("我们设置 JVM 启动参数")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xms10m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xmx10m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintGCDetails")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("blockquote",[t("p",[a._v("JDK7 中的情况")])]),a._v(" "),t("p",[a._v("首先我们会将 3 个 2M 的数组存放到 Eden 区，然后后面 4M 的数组来了后，将无法存储，因为 Eden 区只剩下 2M 的剩余空间了，那么将会进行一次 Young GC 操作，将原来 Eden 区的内容，存放到 Survivor 区，但是 Survivor 区也存放不下，那么就会直接晋级存入 Old 区")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173145.png",alt:"image-20200714083332238"}})]),a._v(" "),t("p",[a._v("然后我们将 4M 对象存入到 Eden 区中")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173147.png",alt:"image-20200714083526790"}})]),a._v(" "),t("p",[a._v("老年代图画的有问题，free 应该是 4M，不然加起来无法无法等于 10MB。")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK8 中的情况")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("youngkbt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("GCLogTest1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("GC")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DefNew")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6322")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("668K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9216")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0034812")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6322")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("4764K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19456")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0035169")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" sys"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" real"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Heap")]),a._v("\n def "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" generation   total "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9216")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7050")]),a._v("K "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fec00000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  eden space "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8192")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("77")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fec00000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff23b668")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff400000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  from space "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("65")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff500000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff5a71d8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("space")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff400000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff400000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff500000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n tenured generation   total "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10240")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4096")]),a._v("K "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   the space "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10240")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("40")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffa00020")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffa00200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metaspace")]),a._v("       used "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3469")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" capacity "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4496")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" committed "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4864")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" reserved "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1056768")]),a._v("K\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" space    used "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("381")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" capacity "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("388")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" committed "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("512")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" reserved "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1048576")]),a._v("K\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Process")]),a._v(" finished "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("exit")]),a._v(" code "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220126182320.png",alt:"image-20220126182311593"}})]),a._v(" "),t("p",[a._v("与 JDK7 不同的是，JDK8 直接判定 4M 的数组为大对象，直接怼到老年区去了")]),a._v(" "),t("h3",{attrs:{id:"常用日志分析工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用日志分析工具"}},[a._v("#")]),a._v(" 常用日志分析工具")]),a._v(" "),t("p",[a._v("可以用一些工具去分析这些 GC 日志。")]),a._v(" "),t("p",[a._v("JVM 参数："),t("code",[a._v("-XLoggc:./logs/gc.log")]),a._v("，其中 ./ 表示当前目录，在 IDEA 中程序运行的当前目录是工程的根目录，而不是模块的根目录。")]),a._v(" "),t("p",[a._v("常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat 等。")]),a._v(" "),t("p",[t("strong",[a._v("GCViewer")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173148.png",alt:"image-20200714084921184"}})]),a._v(" "),t("p",[t("strong",[a._v("GC easy")])]),a._v(" "),t("p",[a._v("在线分析网址：gceasy.io")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173950.png",alt:"image-20200714084726824"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220126182708.png",alt:"image-20220126182706897"}})]),a._v(" "),t("h2",{attrs:{id:"垃圾回收器的新发展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的新发展"}},[a._v("#")]),a._v(" 垃圾回收器的新发展")]),a._v(" "),t("p",[a._v("GC 仍然处于飞速发展之中，"),t("strong",[a._v("目前的默认选项 G1 GC 在不断的进行改进")]),a._v("，很多我们原来认为的缺点，例如串行的 Full GC、Card Table 扫描的低效等，都已经被大幅改进，例如，JDK10 以后，Full GC 已经是并行运行，在很多场景下，其表现还略优于 ParallelGC 的并行 Full GC 实现。")]),a._v(" "),t("p",[a._v("即使是 Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是 GC 相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，"),t("strong",[a._v("在 Server Less 等新的应用场景下，Serial GC 找到了新的舞台")]),a._v("。")]),a._v(" "),t("p",[a._v("比较不幸的是 CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在 JDK9 中已经被标记为废弃，并在 JDK14 版本中移除。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Epsilon：A No-Op GarbageCollector（Epsilon 垃圾回收器，No-Op（无操作）回收器）")])]),a._v(" "),t("li",[t("p",[a._v("ZGC：A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）")])])]),a._v(" "),t("p",[a._v("现在 G1 回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11 出现）和 Shenandoah（Open JDK12）。")]),a._v(" "),t("p",[t("strong",[a._v("主打特点：低停顿时间。")])]),a._v(" "),t("h3",{attrs:{id:"shenandoash-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shenandoash-gc"}},[a._v("#")]),a._v(" Shenandoash GC")]),a._v(" "),t("p",[t("strong",[a._v("Open JDK12 的 Shenandoash GC：低停顿时间的 GC（实验性）。")])]),a._v(" "),t("p",[a._v("Shenandoah，无疑是众多 GC 中最孤独的一个。是第一款不由 Oracle 公司团队领导开发的 Hotspot 垃圾收集器。不可避免的受到官方的排挤。比如号称 OpenJDK 和 OracleJDk 没有区别的 Oracle 公司仍拒绝在 Oracle JDK12 中支持 Shenandoah。")]),a._v(" "),t("p",[a._v("Shenandoah 垃圾回收器最初由 RedHat 进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在针对 JVM 上的内存回收实现低停顿的需求。在 2014 年贡献给 OpenJDK。")]),a._v(" "),t("p",[a._v("RedHat 研发 Shenandoah 团队对外宣称，Shenandoah 垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为 200MB 还是 200GB，99.9% 的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173154.png",alt:"image-20200714090608807"}})]),a._v(" "),t("p",[a._v("这是 RedHat 在 2016 年发表的论文数据，测试内容是使用 ES 对 200GB 的维基百科数据进行索引。从结果看：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标")])]),a._v(" "),t("li",[t("p",[a._v("而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的")])])]),a._v(" "),t("blockquote",[t("p",[a._v("总结")])]),a._v(" "),t("ul",[t("li",[a._v("Shenandoah GC 的弱项：高运行负担下的吞吐量下降")]),a._v(" "),t("li",[a._v("Shenandoah GC 的强项：低延迟时间")])]),a._v(" "),t("h3",{attrs:{id:"革命性的zgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#革命性的zgc"}},[a._v("#")]),a._v(" 革命性的ZGC")]),a._v(" "),t("blockquote",[t("p",[a._v("官方文档："),t("code",[a._v("https://docs.oracle.com/en/java/javase/12/gctuning/")])])]),a._v(" "),t("p",[a._v("ZGC 与 Shenandoah 目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。")]),a._v(" "),t("p",[a._v("《深入理解 Java 虚拟机》一书中这样定义 ZGC 收集器是一款基于 Region 内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。")]),a._v(" "),t("p",[a._v("ZGC 的内存布局和 G1 类似 都是分成一个一个小的内存区域，区别是没有分代（新生代、老年代）的概念了，而是只有小型、中型、大型的区域区分")]),a._v(" "),t("p",[a._v("ZGC 作为新一代的垃圾回收器，在设计之初就定义了三大目标：")]),a._v(" "),t("ul",[t("li",[a._v("支持 TB 级内存")]),a._v(" "),t("li",[a._v("停顿时间控制在 10ms 之内")]),a._v(" "),t("li",[a._v("对程序吞吐量影响小于 15%")])]),a._v(" "),t("p",[a._v("ZGC 的工作过程有很多阶段：初始标记 - 并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射等：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("初始标记")]),a._v("，从根集合出发，找出根集合直接引用的活跃对象，并入栈；该步需要 STW")]),a._v(" "),t("li",[t("strong",[a._v("并发标记")]),a._v("，根据初始标记找到的根对象，使用深度优先遍历对象的成员变量进行标记；并发标记需要解决标记过程中引用关系变化导致的漏标记问题")]),a._v(" "),t("li",[t("strong",[a._v("再标记和非强根并行标记")]),a._v("，在并发标记结束后尝试终结标记动作，理论上并发标记结束后所有待标记的对象会全部完成，但是因为 GC 工作线程和应用程序线程是并发运行，所以可能存在 GC 工作线程执行结束标记时，应用程序线程又有新的引用关系变化导致漏标记，所以这一步先判断是否真的结束了对象的标记，如果没有结束就还会启动并行标记，所以这一步需要 STW。另外，在该步中，还会对非强根（软应用，虚引用等）进行并行标记")]),a._v(" "),t("li",[t("strong",[a._v("并发处理非强引用和非强根并发标记")])]),a._v(" "),t("li",[a._v("重置转移集合中的页面，实际上第一次垃圾回收时无须处理这一步")]),a._v(" "),t("li",[a._v("回收无效的页面，实际上在内存充足的情况下不会触发这一步")]),a._v(" "),t("li",[a._v("并发选择对象的转移集合，转移集合中就是待回收的页面")]),a._v(" "),t("li",[t("strong",[a._v("并发初始化转移集合中的每个页面")]),a._v("，在后续重定位（也称为 "),t("code",[a._v("Remap")]),a._v("）时需要的对象转移表（"),t("code",[a._v("Forward Table")]),a._v("）就是在这一步初始化的")]),a._v(" "),t("li",[t("strong",[a._v("转移根对象引用的对象")]),a._v("，该步需要 STW")]),a._v(" "),t("li",[t("strong",[a._v("并发转移")]),a._v("，把对象移动到新的页面中，这样对象所在的老的页面中所有活跃对象都被转移了，页面就可以被回收重用")])]),a._v(" "),t("p",[a._v("ZGC 几乎在所有地方并发执行的，除了初始标记的是 STW 的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。")]),a._v(" "),t("p",[a._v("而 G1 中的停顿时间主要来自垃圾回收（YGC 和混合回收）阶段中的复制算法，在复制算法中，需要把对象转移到新的空间中，并且更新其他对象到这个对象的引用。实际中对象的转移涉及内存的分配和对象成员变量的复制，而对象成员变量的复制是非常耗时的。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173155.png",alt:"image-20200714091201073"}})]),a._v(" "),t("p",[a._v("停顿时间对比")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173157.png",alt:"image-20200714091401511"}})]),a._v(" "),t("p",[a._v("虽然 ZGC 还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用「令人震惊、革命性」来形容，不为过。\n未来将在服务端、大内存、低延迟应用的首选垃圾收集器。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173158.png",alt:"image-20200714093243028"}})]),a._v(" "),t("p",[a._v("JDK14 之前，ZGC 仅 Linux 才支持。")]),a._v(" "),t("p",[a._v("尽管许多使用 ZGC 的用户都使用类 Linux 的环境，但在 Windows 和 Macos 上，人们也需要 ZGC 进行开发部署和测试。许多桌面应用也可以从 ZGC 中受益。因此，ZGC 特性被移植到了 Windows 和 Macos 上。")]),a._v(" "),t("p",[a._v("现在 Mac 或 Windows 上也能使用 ZGC 了，示例如下：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnlockExperimentalVMOptions")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XX")]),a._v("："),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UseZGC")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h3",{attrs:{id:"aligc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aligc"}},[a._v("#")]),a._v(" AliGC")]),a._v(" "),t("p",[a._v("AliGC 是阿里巴巴 JVM 团队基于 G1 算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Kele-Bingtang/static/img/Java/20220116173201.png",alt:"image-20200714093604012"}})]),a._v(" "),t("p",[a._v("当然，其它厂商也提供了各种别具一格的 GC 实现，例如比较有名的低延迟 GC Zing。")])])}),[],!1,null,null,null);t.default=v.exports}}]);